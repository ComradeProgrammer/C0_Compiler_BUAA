.data:
string$0: .asciiz "Step "
string$1: .asciiz "from "
string$2: .asciiz "to "
.align 2
chess: .space 256
chess_record_num: .space 4
count_chess: .space 4
count_hanno: .space 4
hanno_flag: .space 4
hanno_record_num: .space 4
line: .space 4
.text:
jal main
hannuo:
sw $ra,52($sp)#save the return value
lw $t0,hanno_flag	#load global variable hanno_flag
li $t1,1	# load immediate 1
bne $t0,$t1,label$2
##TMP2 = hanno_flag == 1

#BZ #TMP2 _label2

li $v0,0
lw $ra,52($sp)
addiu $sp,$sp,72
jr $ra
#ret 0

label$2:
li $t0,1	# load immediate 1
bne $a0,$t0,label$3
#_label2: #TMP3 = n == 1

#BZ #TMP3 _label3

lw $t0,count_hanno	#load global variable count_hanno
addiu $t0,$t0,1#count_hanno = count_hanno + 1

sw $t0,count_hanno#write back global variable count_hanno
j label$4#GOTO _label4

label$3:
subiu $t0,$a0,1#_label3: #TMP5 = n - 1

sw $a0,56($sp)
move $a0,$t0
sw $t0,-16($sp)
sw $a1,60($sp)
move $a1,$a1
sw $a1,-12($sp)
sw $a2,64($sp)
move $a2,$a3
sw $a3,-8($sp)
sw $a3,68($sp)
move $a3,$a2
sw $a2,-4($sp)
addiu $sp,$sp,-72
jal hannuo
lw $a0,56($sp)
lw $a1,60($sp)
lw $a2,64($sp)
lw $a3,68($sp)
#call hannuo

lw $t0,count_hanno	#load global variable count_hanno
addiu $t0,$t0,1#count_hanno = count_hanno + 1

sw $t0,count_hanno#write back global variable count_hanno
lw $t0,count_hanno	#load global variable count_hanno
lw $t1,hanno_record_num	#load global variable hanno_record_num
bne $t0,$t1,label$5
##TMP8 = count_hanno == hanno_record_num

#BZ #TMP8 _label5

move $3,$a0
la $a0,string$0
li $v0,4
syscall #printstring
move $a0,$3
# syscall-4 Step 

move $3,$a0
lw $a0,hanno_record_num
li $v0,1
syscall #printint
move $a0,$3
# syscall-1 hanno_record_num

move $3,$a0
li $a0,10
li $v0,11
syscall #printchar
move $a0,$3
# syscall-11 10

move $3,$a0
la $a0,string$1
li $v0,4
syscall #printstring
move $a0,$3
# syscall-4 from 

move $3,$a0
move $a0,$a1
li $v0,11
syscall #printchar
move $a0,$3
# syscall-11 one

move $3,$a0
li $a0,10
li $v0,11
syscall #printchar
move $a0,$3
# syscall-11 10

move $3,$a0
la $a0,string$2
li $v0,4
syscall #printstring
move $a0,$3
# syscall-4 to 

move $3,$a0
move $a0,$a3
li $v0,11
syscall #printchar
move $a0,$3
# syscall-11 three

move $3,$a0
li $a0,10
li $v0,11
syscall #printchar
move $a0,$3
# syscall-11 10

lw $t0,hanno_flag	#load global variable hanno_flag
li $t0,1
sw $t0,hanno_flag#write back global variable hanno_flag
label$5:
subiu $t0,$a0,1#_label5: #TMP9 = n - 1

sw $a0,56($sp)
move $a0,$t0
sw $t0,-16($sp)
sw $a1,60($sp)
move $a1,$a2
sw $a2,-12($sp)
sw $a2,64($sp)
move $a2,$a1
sw $a1,-8($sp)
sw $a3,68($sp)
move $a3,$a3
sw $a3,-4($sp)
addiu $sp,$sp,-72
jal hannuo
lw $a0,56($sp)
lw $a1,60($sp)
lw $a2,64($sp)
lw $a3,68($sp)
#call hannuo

label$4:
li $v0,0
lw $ra,52($sp)
addiu $sp,$sp,72
jr $ra
#_label4: ret 0

Fibonacci:
sw $ra,60($sp)#save the return value
sw $s0,28($sp)
li $t0,1	# load immediate 1
bge $a0,$t0,label$6
##TMP11 = n < 1

#BZ #TMP11 _label6

li $v0,0
lw $s0,28($sp)
lw $ra,60($sp)
addiu $sp,$sp,68
jr $ra
#ret 0

j label$7#GOTO _label7

label$6:
li $t0,1	# load immediate 1
bne $a0,$t0,label$8
#_label6: #TMP12 = n == 1

#BZ #TMP12 _label8

li $v0,1
lw $s0,28($sp)
lw $ra,60($sp)
addiu $sp,$sp,68
jr $ra
#ret 1

j label$7#GOTO _label7

label$8:
subiu $t0,$a0,1#_label8: #TMP13 = n - 1

sw $a0,64($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-68
jal Fibonacci
lw $a0,64($sp)
#call Fibonacci

move $s0,$v0##TMP14=RET

subiu $t0,$a0,2##TMP15 = n - 2

sw $a0,64($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-68
jal Fibonacci
lw $a0,64($sp)
#call Fibonacci

move $t0,$v0##TMP16=RET

addu $t1,$s0,$t0##TMP17 = #TMP14 + #TMP16

move $v0,$t1
lw $s0,28($sp)
lw $ra,60($sp)
addiu $sp,$sp,68
jr $ra
#ret #TMP17

label$7:
nop
Get_reminder:
sw $ra,52($sp)#save the return value
sw $s0,20($sp)
slti $t0,$a0,10##TMP18 = n < 10

li $s0,1
beq $t0,$0,label$10#BZ #TMP18 _label10

move $v0,$a0
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,60
jr $ra
#ret n

label$10:
j label$12#_label10: GOTO _label12

label$11:
mul $s0,$s0,10#_label11: base = base * 10

label$12:
bgt $a0,$s0,label$11
#_label12: #TMP19 = n > base

#BNZ #TMP19 _label11

li $t0,10	# load immediate 10
div $s0,$t0
mflo $s0#base = base / 10

j label$14#GOTO _label14

label$13:
subu $a0,$a0,$s0#_label13: n = n - base

label$14:
bgt $a0,$s0,label$13
#_label14: #TMP22 = n > base

#BNZ #TMP22 _label13

sw $a0,56($sp)
move $a0,$a0
sw $a0,-4($sp)
addiu $sp,$sp,-60
jal Get_reminder
lw $a0,56($sp)
#call Get_reminder

move $t0,$v0##TMP24=RET

move $v0,$t0
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,60
jr $ra
#ret #TMP24

Factorial:
sw $ra,48($sp)#save the return value
li $t0,1	# load immediate 1
ble $a0,$t0,label$15
##TMP25 = i > 1

#BZ #TMP25 _label15

subiu $t0,$a0,1##TMP26 = i - 1

sw $a0,52($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-56
jal Factorial
lw $a0,52($sp)
#call Factorial

move $t0,$v0##TMP27=RET

mul $t1,$a0,$t0##TMP28 = i * #TMP27

move $v0,$t1
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#ret #TMP28

j label$16#GOTO _label16

label$15:
li $v0,1
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#_label15: ret 1

label$16:
nop
Sum:
sw $ra,48($sp)#save the return value
li $t0,1	# load immediate 1
bge $a0,$t0,label$17
##TMP29 = n < 1

#BZ #TMP29 _label17

move $v0,$a0
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#ret n

j label$18#GOTO _label18

label$17:
subiu $t0,$a0,1#_label17: #TMP30 = n - 1

sw $a0,52($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-56
jal Sum
lw $a0,52($sp)
#call Sum

move $t0,$v0##TMP31=RET

addu $t1,$a0,$t0##TMP32 = n + #TMP31

move $v0,$t1
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#ret #TMP32

label$18:
nop
Sum_Factorial:
sw $ra,52($sp)#save the return value
sw $s0,20($sp)
li $t0,1	# load immediate 1
bne $a0,$t0,label$19
##TMP33 = n == 1

#BZ #TMP33 _label19

li $v0,1
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,60
jr $ra
#ret 1

j label$20#GOTO _label20

label$19:
sw $a0,56($sp)
move $a0,$a0
sw $a0,-4($sp)
addiu $sp,$sp,-56
jal Factorial
lw $a0,56($sp)
#call Factorial

move $s0,$v0##TMP34=RET

subiu $t0,$a0,1##TMP35 = n - 1

sw $a0,56($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-60
jal Sum_Factorial
lw $a0,56($sp)
#call Sum_Factorial

move $t0,$v0##TMP36=RET

addu $t1,$s0,$t0##TMP37 = #TMP34 + #TMP36

move $v0,$t1
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,60
jr $ra
#ret #TMP37

label$20:
nop
Permutation:
sw $ra,52($sp)#save the return value
sw $s0,20($sp)
bne $a0,$0,label$21#BNZ m _label21

li $v0,1
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,64
jr $ra
#ret 1

j label$22#GOTO _label22

label$21:
bne $a1,$0,label$23#_label21: BNZ n _label23

li $v0,1
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,64
jr $ra
#ret 1

j label$22#GOTO _label22

label$23:
subiu $t0,$a0,1#_label23: #TMP38 = m - 1

sw $a0,56($sp)
move $a0,$t0
sw $t0,-8($sp)
sw $a1,60($sp)
move $a1,$a1
sw $a1,-4($sp)
addiu $sp,$sp,-64
jal Permutation
lw $a0,56($sp)
lw $a1,60($sp)
#call Permutation

move $s0,$v0##TMP39=RET

subiu $t0,$a1,1##TMP40 = n - 1

sw $a0,56($sp)
move $a0,$a0
sw $a0,-8($sp)
sw $a1,60($sp)
move $a1,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-64
jal Permutation
lw $a0,56($sp)
lw $a1,60($sp)
#call Permutation

move $t0,$v0##TMP41=RET

addu $t1,$s0,$t0##TMP42 = #TMP39 + #TMP41

move $v0,$t1
lw $s0,20($sp)
lw $ra,52($sp)
addiu $sp,$sp,64
jr $ra
#ret #TMP42

label$22:
nop
main:
addiu $sp,$sp,-28
lw $t0,line	#load global variable line
li $v0,5
syscall
move $t0,$v0
sw $t0,line#write back global variable line
li $v0,5
syscall
move $s0,$v0
lw $t0,hanno_record_num	#load global variable hanno_record_num
li $v0,5
syscall
move $t0,$v0
sw $t0,hanno_record_num#write back global variable hanno_record_num
lw $t0,count_chess	#load global variable count_chess
li $t0,0
sw $t0,count_chess#write back global variable count_chess
lw $t0,count_hanno	#load global variable count_hanno
li $t0,0
sw $t0,count_hanno#write back global variable count_hanno
lw $t0,hanno_flag	#load global variable hanno_flag
li $t0,0
sw $t0,hanno_flag#write back global variable hanno_flag
move $a0,$s0
sw $s0,-16($sp)
li $t0,65	# load immediate 65
move $a1,$t0
sw $t0,-12($sp)
li $t1,66	# load immediate 66
move $a2,$t1
sw $t1,-8($sp)
li $t2,67	# load immediate 67
move $a3,$t2
sw $t2,-4($sp)
addiu $sp,$sp,-72
jal hannuo
#call hannuo

lw $a0,count_hanno
li $v0,1
syscall #printint
# syscall-1 count_hanno

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t0,4	# load immediate 4
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-68
jal Fibonacci
#call Fibonacci

move $t0,$v0##TMP44=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP44

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t1,5	# load immediate 5
move $a0,$t1
sw $t1,-4($sp)
addiu $sp,$sp,-56
jal Factorial
#call Factorial

move $t0,$v0##TMP45=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP45

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t1,10	# load immediate 10
move $a0,$t1
sw $t1,-4($sp)
addiu $sp,$sp,-56
jal Sum
#call Sum

move $t0,$v0##TMP46=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP46

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t1,5	# load immediate 5
move $a0,$t1
sw $t1,-4($sp)
addiu $sp,$sp,-60
jal Sum_Factorial
#call Sum_Factorial

move $t0,$v0##TMP47=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP47

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t1,3464	# load immediate 3464
move $a0,$t1
sw $t1,-4($sp)
addiu $sp,$sp,-60
jal Get_reminder
#call Get_reminder

move $t0,$v0##TMP48=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP48

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

li $t1,8	# load immediate 8
move $a0,$t1
sw $t1,-8($sp)
li $t2,5	# load immediate 5
move $a1,$t2
sw $t2,-4($sp)
addiu $sp,$sp,-64
jal Permutation
#call Permutation

move $t0,$v0##TMP49=RET

move $a0,$t0
li $v0,1
syscall #printint
# syscall-1 #TMP49

li $a0,10
li $v0,11
syscall #printchar
# syscall-11 10

