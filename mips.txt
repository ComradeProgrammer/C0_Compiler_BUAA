.data:
string$0: .asciiz "x = "
string$1: .asciiz "y = "
string$2: .asciiz "SWAP x = "
string$3: .asciiz "SWAP y = "
string$4: .asciiz "OVERFLOW!"
string$5: .asciiz "complete number: "
string$6: .asciiz "  "
string$7: .asciiz " "
string$8: .asciiz "---------------------------------------------------------------"
string$9: .asciiz "'water flower'number is:"
string$10: .asciiz "  "
string$11: .asciiz " "
string$12: .asciiz "---------------------------------------------------------------"
string$13: .asciiz " "
string$14: .asciiz " "
string$15: .asciiz "The total is "
string$16: .asciiz "5 != "
.align 2
MAX_NUM: .word 128
.text:
jal main
factorial:
sw $ra,48($sp)#save the return value
sle $t0,$a0,1##TMP2 = n <= 1

blez $t0,label$2#BZ #TMP2 _label2

li $v0,1
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#ret 1

label$2:
subiu $t0,$a0,1#_label2: #TMP3 = n - 1

sw $a0,52($sp)
move $a0,$t0
sw $t0,-4($sp)
addiu $sp,$sp,-56
jal factorial
lw $a0,52($sp)
#call factorial

move $t0,$v0##TMP4=RET

mul $t1,$a0,$t0##TMP5 = n * #TMP4

move $v0,$t1
lw $ra,48($sp)
addiu $sp,$sp,56
jr $ra
#ret #TMP5

mod:
sw $ra,40($sp)#save the return value
div $a0,$a1
mflo $t0##TMP6 = x / y

mul $t1,$t0,$a1##TMP7 = #TMP6 * y

subu $a0,$a0,$t1#x = x - #TMP7

move $v0,$a0
lw $ra,40($sp)
addiu $sp,$sp,52
jr $ra
#ret x

swap:
sw $ra,36($sp)#save the return value
sw $a0,40($sp)
la $a0,string$0
li $v0,4
syscall #printstring
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
lw $a0,40($sp)
li $v0,1
syscall #printint
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
li $a0,10
li $v0,11
syscall #printchar
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
la $a0,string$1
li $v0,4
syscall #printstring
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
move $a0,$a1
li $v0,1
syscall #printint
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
li $a0,10
li $v0,11
syscall #printchar
lw $a0,40($sp)	#load variable x
lw $t0,0($sp)	#load variabletemp
lw $t0,40($sp)#temp=x

lw $a0,40($sp)	#load variable x
move $a0,$a1#x=y

sw $a0,40($sp)
la $a0,string$2
li $v0,4
syscall #printstring
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
lw $a0,40($sp)
li $v0,1
syscall #printint
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
li $a0,10
li $v0,11
syscall #printchar
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
la $a0,string$3
li $v0,4
syscall #printstring
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
move $a0,$t0
li $v0,1
syscall #printint
lw $a0,40($sp)	#load variable x
sw $a0,40($sp)
li $a0,10
li $v0,11
syscall #printchar
lw $a0,40($sp)	#load variable x
lw $ra,36($sp)
addiu $sp,$sp,48
jr $ra
#ret 

full_num:
sw $ra,48($sp)#save the return value
mul $t0,$a0,100##TMP9 = n * 100

mul $t1,$a1,10##TMP10 = j * 10

addu $t2,$t0,$t1##TMP11 = #TMP9 + #TMP10

addu $t3,$t2,$a2##TMP12 = #TMP11 + a

move $v0,$t3
lw $ra,48($sp)
addiu $sp,$sp,64
jr $ra
#ret #TMP12

flower_num:
sw $ra,64($sp)#save the return value
mul $t0,$a0,$a0##TMP13 = n * n

mul $t1,$t0,$a0##TMP14 = #TMP13 * n

mul $t2,$a1,$a1##TMP15 = j * j

mul $t3,$t2,$a1##TMP16 = #TMP15 * j

addu $t4,$t1,$t3##TMP17 = #TMP14 + #TMP16

mul $t5,$a2,$a2##TMP18 = a * a

mul $t6,$t5,$a2##TMP19 = #TMP18 * a

addu $t7,$t4,$t6##TMP20 = #TMP17 + #TMP19

move $v0,$t7
lw $ra,64($sp)
addiu $sp,$sp,80
jr $ra
#ret #TMP20

complete_flower_num:
sw $ra,780($sp)#save the return value
sw $s0,748($sp)
sw $s1,752($sp)
sw $s2,756($sp)
sw $s3,760($sp)
sw $s4,764($sp)
li $s1,2
label$3:
slti $t0,$s1,128#_label3: #TMP21 = j < 128

blez $t0,label$4#BZ #TMP21 _label4

li $s0,1
li $s2,-1
move $s3,$s1#s=j

label$5:
slt $t0,$s0,$s1#_label5: #TMP22 = i < j

blez $t0,label$6#BZ #TMP22 _label6

div $s1,$s0
mflo $t0##TMP23 = j / i

div $s1,$s0
mflo $t1##TMP29 = j / i

mul $t2,$t1,$s0##TMP30 = #TMP29 * i

subu $t3,$s1,$t2##TMP27 = j - #TMP30

seq $t4,$t3,0##TMP31 = #TMP27 == 0

blez $t4,label$7#BZ #TMP31 _label7

addiu $s2,$s2,1#n = n + 1

subu $s3,$s3,$s0#s = s - i

sge $t0,$s2,128##TMP34 = n >= 128

blez $t0,label$8#BZ #TMP34 _label8

sw $a0,68($sp)
la $a0,string$4
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
j label$7#GOTO _label7

label$8:
sll $t0,$s2,2
addu $t0,$t0,$sp
sw $s0,180($t0)#_label8: k[n] =i

label$7:
addiu $s0,$s0,1#_label7: i = i + 1

j label$5#GOTO _label5

label$6:
seq $t0,$s3,0#_label6: #TMP35 = s == 0

blez $t0,label$10#BZ #TMP35 _label10

la $a0,string$5
li $v0,4
syscall #printstring
move $a0,$s1
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
li $s0,0
label$11:
sle $t0,$s0,$s2#_label11: #TMP36 = i <= n

blez $t0,label$12#BZ #TMP36 _label12

la $a0,string$6
li $v0,4
syscall #printstring
sll $t1,$s0,2
addu $t1,$t1,$sp
lw $t0,180($t1)##TMP37 = k [ i ] 

move $a0,$t0
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
addiu $s0,$s0,1#i = i + 1

j label$11#GOTO _label11

label$12:
la $a0,string$7
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
label$10:
addiu $s1,$s1,1#_label10: j = j + 1

j label$3#GOTO _label3

label$4:
la $a0,string$8
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
la $a0,string$9
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
li $s0,100
li $s1,0
label$13:
li $t1,100	# load immediate 100
addiu $t0,$t1,128#_label13: #TMP38 = 100 + 128

slt $t2,$s0,$t0##TMP39 = i < #TMP38

blez $t2,label$14#BZ #TMP39 _label14

li $t0,100	# load immediate 100
div $s0,$t0
mflo $s2#n = i / 100

li $t2,10	# load immediate 10
div $s0,$t2
mflo $t1##TMP41 = i / 10

li $t4,10	# load immediate 10
div $t1,$t4
mflo $t3##TMP46 = #TMP41 / 10

mul $t5,$t3,10##TMP47 = #TMP46 * 10

subu $t6,$t1,$t5##TMP44 = #TMP41 - #TMP47

li $t8,10	# load immediate 10
div $s0,$t8
mflo $t7##TMP52 = i / 10

mul $t9,$t7,10##TMP53 = #TMP52 * 10

subu $t1,$s0,$t9##TMP50 = i - #TMP53

mul $t3,$s2,100##TMP59 = n * 100

mul $t5,$t6,10##TMP60 = #TMP44 * 10

addu $t7,$t3,$t5##TMP61 = #TMP59 + #TMP60

addu $t3,$t7,$t1##TMP62 = #TMP61 + #TMP50

mul $t5,$s2,$s2##TMP68 = n * n

mul $t7,$t5,$s2##TMP69 = #TMP68 * n

mul $t5,$t6,$t6##TMP70 = #TMP44 * #TMP44

mul $t9,$t5,$t6##TMP71 = #TMP70 * #TMP44

addu $t5,$t7,$t9##TMP72 = #TMP69 + #TMP71

mul $t6,$t1,$t1##TMP73 = #TMP50 * #TMP50

mul $t7,$t6,$t1##TMP74 = #TMP73 * #TMP50

addu $t1,$t5,$t7##TMP75 = #TMP72 + #TMP74

seq $t5,$t3,$t1##TMP76 = #TMP62 == #TMP75

blez $t5,label$15#BZ #TMP76 _label15

sll $t0,$s1,2
addu $t0,$t0,$sp
sw $s0,180($t0)#k[y] =i

addiu $s1,$s1,1#y = y + 1

label$15:
addiu $s0,$s0,1#_label15: i = i + 1

j label$13#GOTO _label13

label$14:
li $s0,0
label$16:
slt $t0,$s0,$s1#_label16: #TMP78 = i < y

blez $t0,label$17#BZ #TMP78 _label17

la $a0,string$10
li $v0,4
syscall #printstring
sll $t1,$s0,2
addu $t1,$t1,$sp
lw $t0,180($t1)##TMP79 = k [ i ] 

move $a0,$t0
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
addiu $s0,$s0,1#i = i + 1

j label$16#GOTO _label16

label$17:
la $a0,string$11
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
la $a0,string$12
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
li $s1,2
li $s3,0
li $s4,1
label$18:
sle $t0,$s1,128#_label18: #TMP80 = m <= 128

blez $t0,label$19#BZ #TMP80 _label19

li $t0,2	# load immediate 2
div $s1,$t0
mflo $s2#k2 = m / 2

li $s0,2
label$20:
sle $t0,$s0,$s2#_label20: #TMP82 = i <= k2

blez $t0,label$21#BZ #TMP82 _label21

div $s1,$s0
mflo $t0##TMP83 = m / i

div $s1,$s0
mflo $t1##TMP89 = m / i

mul $t2,$t1,$s0##TMP90 = #TMP89 * i

subu $t3,$s1,$t2##TMP87 = m - #TMP90

seq $t4,$t3,0##TMP91 = #TMP87 == 0

blez $t4,label$22#BZ #TMP91 _label22

li $s4,0
label$22:
addiu $s0,$s0,1#_label22: i = i + 1

j label$20#GOTO _label20

label$21:
seq $t0,$s4,1#_label21: #TMP92 = leap == 1

blez $t0,label$23#BZ #TMP92 _label23

la $a0,string$13
li $v0,4
syscall #printstring
move $a0,$s1
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
addiu $s3,$s3,1#h = h + 1

li $t1,10	# load immediate 10
div $s3,$t1
mflo $t0##TMP94 = h / 10

lw $t2,740($sp)	#load variablex2
mul $t2,$t0,10#x2 = #TMP94 * 10

seq $t3,$t2,$s3##TMP96 = x2 == h

blez $t3,label$23#BZ #TMP96 _label23

la $a0,string$14
li $v0,4
syscall #printstring
li $a0,10
li $v0,11
syscall #printchar
label$23:
addiu $s1,$s1,1#_label23: m = m + 1

li $s4,1
j label$18#GOTO _label18

label$19:
la $a0,string$15
li $v0,4
syscall #printstring
move $a0,$s3
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
lw $s0,748($sp)
lw $s1,752($sp)
lw $s2,756($sp)
lw $s3,760($sp)
lw $s4,764($sp)
lw $ra,780($sp)
addiu $sp,$sp,784
jr $ra
#ret 

main:
addiu $sp,$sp,-4
li $t0,5	# load immediate 5
move $a0,$t0
sw $t0,-4($sp)
sw $a1,72($sp)
sw $a2,76($sp)
addiu $sp,$sp,-56
jal factorial
lw $a1,72($sp)
lw $a2,76($sp)
#call factorial

lw $t0,0($sp)	#load variablen
move $t0,$v0#n=RET

la $a0,string$16
li $v0,4
syscall #printstring
move $a0,$t0
li $v0,1
syscall #printint
li $a0,10
li $v0,11
syscall #printchar
li $t1,5	# load immediate 5
move $a0,$t1
sw $t1,-8($sp)
li $t2,10	# load immediate 10
sw $a1,72($sp)
move $a1,$t2
sw $t2,-4($sp)
sw $a2,76($sp)
addiu $sp,$sp,-48
jal swap
lw $a1,72($sp)
lw $a2,76($sp)
#call swap

sw $a1,72($sp)
sw $a2,76($sp)
addiu $sp,$sp,-784
jal complete_flower_num
lw $a1,72($sp)
lw $a2,76($sp)
#call complete_flower_num

