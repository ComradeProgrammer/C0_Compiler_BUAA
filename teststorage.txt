int tmp[650000];

int ack(int m,int n){
    int res;
    if(tmp[m*70000+n]!=-1){
        return (tmp[m*70000+n]);
    }
	if(m==0){
		res= (n+1);
	}
	else if(n==0){
		res= (ack(m-1,1));
	}
	else{
        res= (ack(m-1,ack(m,n-1)));
	}
    tmp[m*70000+n]=res;
    return (res);
}

void main(){
	int i,j;
	for(i=0;i<10;i=i+1){
		for(j=0;j<70000;j=j+1){
			tmp[i*70000+j]=-1;
		}
	}
	printf(ack(4,1));

}


//===================


int arr[1000], tmp[1000];

void merge(int s1, int l1, int s2, int l2) {
    int i, j, k;
    i = 0;
    j = 0;
    k = s1;
    while (i < l1) {
        if (j < l2) {
            if (arr[s1 + i] > arr[s2 + j]) {
                tmp[k] = arr[s2 + j];
                j = j + 1;
            } else {
                tmp[k] = arr[s1 + i];
                i = i + 1;
            }
            k = k + 1;
        } else {
            while (i < l1) {
                tmp[k] = arr[s1 + i];
                k = k + 1;
                i = i + 1;
            }
        }
    }
    while (j < l2) {
        tmp[k] = arr[s2 + j];
        k = k + 1;
        j = j + 1;
    }
    for (i = s1; i < k; i = i + 1) arr[i] = tmp[i];
}

void inner_merge_sort(int start, int length) {
    int tmp, mid;
    if (length <= 1) return;
    if (length == 2) {
        if (arr[start] > arr[start + 1]) {
            tmp = arr[start];
            arr[start] = arr[start + 1];
            arr[start + 1] = tmp;
        }
        return;
    }
    mid = length / 2;
    inner_merge_sort(start, mid);
    inner_merge_sort(start + mid, length - mid);
    merge(start, mid, start + mid, length - mid);
}

void main() {
    int n, i, a;
    printf("17373248");
    scanf(n);
    for (i = 0; i < n; i = i + 1) {
        scanf(a);
        arr[i] = a;
    }
    inner_merge_sort(0, n);
    for (i = 0; i < n; i = i + 1) printf(arr[i]);
}

//===
int a[100];
void qs(int x,int y){
const int s=1;
	int tmp,pivot,i,j;
	if(x>=y){
		return;
	}
	else if(x==y-1){
		if(a[x]>a[y]){
			tmp=a[x];
			a[x]=a[y];
			a[y]=tmp;
		}
		return;
	}
	else{
		pivot=a[x];
		i=x;j=x+s;
		while(j<=y){
			if(a[j]<=pivot){
				tmp=a[j];
				i=i+s;
				a[j]=a[i];
				a[i]=tmp;
			}
			j=j+s;
		}
		a[x]=a[i];
		a[i]=pivot;
		qs(x,i-1);
		qs(i+1,y);
	}
}

void main(){

	int n,i,tmp;
	scanf(n);
	for(i=0;i<n;i=i+1){
		scanf(tmp);
		a[i]=tmp;
	}
	qs(0,n-1);
	printf("result");
	for(i=0;i<n;i=i+1){
		printf(a[i]);
	}
}
//==============
char arr[10];

void arrange(int n, int i)
{
    const int ONE = 1;
    int j;
    char tmp;
    if (i >= n - 1)
    {
        for (j = 0; j < n; j = j + 1) printf(arr[j]);
        return;
    }
    else {
        arrange(n, i + 1);
        for (j = i + ONE; j < n; j = j + 1) if ((arr[i]) != (arr[j]))
            {
                tmp = arr[i];
                arr[i] = arr[j];
                arr[j] = tmp;
                arrange(n, i + 1);
            }
        for (j = i + 1; n > j; j = j + 1) {
            tmp = arr[j - 1];
            arr[j + -1] = arr[j];
            arr[j] = tmp;
        }
    }
}

void main() {
    arr[0] = 'a';
    arr[1] = 'b';
    arr[2] = 'c';
    arr[3] = 'd';
    arr[4] = 'e';
    arr[5] = 'f';
    arrange(5, 0);
}
//========
int x;
int mod(int x,int y){
	int q;
	q=x/y;
	return (x-q*y);
}

int isPrime(int x){
	int i;
	if(x==2){
		return (1);
	}
	else{
		for(i=3;i<x;i=i+1){
			if(mod(x,i)==0){
				return (0);
			}
		}
	}
	return (1);
}

void fenjie(int x){
	int loop,i;
	loop=1;
	i=2;
	printf("the prime factors of ",x);
	while(loop){
		if(x==1){
			return;
		}
		if(isPrime(i)){
			if(mod(x,i)==0){
				printf(i);
				x=x/i;
				i=2;
			}
			else{
				i=i+1;
			}
		}
		else{
			i=i+1;
		}
	}
	
}
void main(){

	x=0;
	while(x!=-1){
		printf("input the number");
		scanf(x);
		if(x!=-1)
			fenjie(x);
	}
	
}