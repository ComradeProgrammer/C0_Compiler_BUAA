int arr[1000]
int tmp[1000]
int i
int j
int k
void merge()
para int s1
para int l1
para int s2
para int l2
i=0
j=0
k=s1
_label2: nop
#TMP2 = i < l1
BZ #TMP2 _label3
#TMP3 = j < l2
BZ #TMP3 _label4
#TMP4 = s1 + i
#TMP5 = arr [ #TMP4 ] 
#TMP6 = s2 + j
#TMP7 = arr [ #TMP6 ] 
#TMP8 = #TMP5 > #TMP7
BZ #TMP8 _label5
#TMP9 = s2 + j
#TMP10 = arr [ #TMP9 ] 
tmp[k] =#TMP10
#TMP11 = j + 1
j=#TMP11
GOTO _label6
_label5: nop
#TMP12 = s1 + i
#TMP13 = arr [ #TMP12 ] 
tmp[k] =#TMP13
#TMP14 = i + 1
i=#TMP14
_label6: nop
#TMP15 = k + 1
k=#TMP15
GOTO _label7
_label4: nop
_label8: nop
#TMP16 = i < l1
BZ #TMP16 _label9
#TMP17 = s1 + i
#TMP18 = arr [ #TMP17 ] 
tmp[k] =#TMP18
#TMP19 = k + 1
k=#TMP19
#TMP20 = i + 1
i=#TMP20
GOTO _label8
_label9: nop
_label7: nop
GOTO _label2
_label3: nop
_label10: nop
#TMP21 = j < l2
BZ #TMP21 _label11
#TMP22 = s2 + j
#TMP23 = arr [ #TMP22 ] 
tmp[k] =#TMP23
#TMP24 = k + 1
k=#TMP24
#TMP25 = j + 1
j=#TMP25
GOTO _label10
_label11: nop
i=s1
_label12: nop
#TMP26 = i < k
BZ #TMP26 _label13
#TMP27 = tmp [ i ] 
arr[i] =#TMP27
i = i + 1
GOTO _label12
_label13: nop
ret 
int mid
int tmp
void inner_merge_sort()
para int start
para int length
#TMP28 = length <= 1
BZ #TMP28 _label14
ret 
_label14: nop
#TMP29 = length == 2
BZ #TMP29 _label15
#TMP30 = arr [ start ] 
#TMP31 = start + 1
#TMP32 = arr [ #TMP31 ] 
#TMP33 = #TMP30 > #TMP32
BZ #TMP33 _label16
#TMP34 = arr [ start ] 
tmp=#TMP34
#TMP35 = start + 1
#TMP36 = arr [ #TMP35 ] 
arr[start] =#TMP36
#TMP37 = start + 1
arr[#TMP37] =tmp
_label16: nop
ret 
_label15: nop
#TMP38 = length / 2
mid=#TMP38
push start
push mid
call inner_merge_sort
#TMP40 = length - mid
#TMP39 = start + mid
push #TMP39
push #TMP40
call inner_merge_sort
#TMP42 = length - mid
#TMP41 = start + mid
push start
push mid
push #TMP41
push #TMP42
call merge
ret 
int a
int i
int n
void main()
syscall-4 17373248
syscall-11 10
n = syscall-5 
i=0
_label17: nop
#TMP43 = i < n
BZ #TMP43 _label18
a = syscall-5 
arr[i] =a
i = i + 1
GOTO _label17
_label18: nop
push 0
push n
call inner_merge_sort
i=0
_label19: nop
#TMP44 = i < n
BZ #TMP44 _label20
#TMP45 = arr [ i ] 
syscall-1 #TMP45
syscall-11 10
i = i + 1
GOTO _label19
_label20: nop

====Block0====
void merge()
para int s1
para int l1
para int s2
para int l2
i=0
j=0
k=s1
	prev:[]
	next:[1,]
	use:[s1,]
	def:[i,j,k,]
	activeIn:[arr,tmp,s1,l1,s2,l2,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block1====
_label2: nop
#TMP2 = i < l1
BZ #TMP2 _label3
	prev:[0,11,]
	next:[2,12,]
	use:[l1,i,]
	def:[#TMP2,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block2====
#TMP3 = j < l2
BZ #TMP3 _label4
	prev:[1,]
	next:[3,7,]
	use:[l2,j,]
	def:[#TMP3,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block3====
#TMP4 = s1 + i
#TMP5 = arr [ #TMP4 ] 
#TMP6 = s2 + j
#TMP7 = arr [ #TMP6 ] 
#TMP8 = #TMP5 > #TMP7
BZ #TMP8 _label5
	prev:[2,]
	next:[4,5,]
	use:[arr,s1,s2,i,j,]
	def:[#TMP8,#TMP7,#TMP6,#TMP5,#TMP4,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block4====
#TMP9 = s2 + j
#TMP10 = arr [ #TMP9 ] 
tmp[k] =#TMP10
#TMP11 = j + 1
j=#TMP11
GOTO _label6
	prev:[3,]
	next:[5,6,]
	use:[arr,s2,j,k,]
	def:[#TMP11,#TMP10,#TMP9,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block5====
_label5: nop
#TMP12 = s1 + i
#TMP13 = arr [ #TMP12 ] 
tmp[k] =#TMP13
#TMP14 = i + 1
i=#TMP14
	prev:[4,3,]
	next:[6,]
	use:[arr,s1,i,k,]
	def:[#TMP14,#TMP13,#TMP12,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block6====
_label6: nop
#TMP15 = k + 1
k=#TMP15
GOTO _label7
	prev:[5,4,]
	next:[7,11,]
	use:[k,]
	def:[#TMP15,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block7====
_label4: nop
	prev:[6,2,]
	next:[8,]
	use:[]
	def:[]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block8====
_label8: nop
#TMP16 = i < l1
BZ #TMP16 _label9
	prev:[7,9,]
	next:[9,10,]
	use:[l1,i,]
	def:[#TMP16,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block9====
#TMP17 = s1 + i
#TMP18 = arr [ #TMP17 ] 
tmp[k] =#TMP18
#TMP19 = k + 1
k=#TMP19
#TMP20 = i + 1
i=#TMP20
GOTO _label8
	prev:[8,]
	next:[10,8,]
	use:[arr,s1,i,k,]
	def:[#TMP20,#TMP19,#TMP18,#TMP17,]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block10====
_label9: nop
	prev:[9,8,]
	next:[11,]
	use:[]
	def:[]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block11====
_label7: nop
GOTO _label2
	prev:[10,6,]
	next:[12,1,]
	use:[]
	def:[]
	activeIn:[arr,tmp,s1,l1,s2,l2,i,j,k,]
	activeOut:[arr,tmp,s1,l1,s2,l2,i,j,k,]
==============
====Block12====
_label3: nop
	prev:[11,1,]
	next:[13,]
	use:[]
	def:[]
	activeIn:[arr,tmp,s1,s2,l2,j,k,]
	activeOut:[arr,tmp,s1,s2,l2,j,k,]
==============
====Block13====
_label10: nop
#TMP21 = j < l2
BZ #TMP21 _label11
	prev:[12,14,]
	next:[14,15,]
	use:[l2,j,]
	def:[#TMP21,]
	activeIn:[arr,tmp,s1,s2,l2,j,k,]
	activeOut:[arr,tmp,s1,s2,l2,j,k,]
==============
====Block14====
#TMP22 = s2 + j
#TMP23 = arr [ #TMP22 ] 
tmp[k] =#TMP23
#TMP24 = k + 1
k=#TMP24
#TMP25 = j + 1
j=#TMP25
GOTO _label10
	prev:[13,]
	next:[15,13,]
	use:[arr,s2,j,k,]
	def:[#TMP25,#TMP24,#TMP23,#TMP22,]
	activeIn:[arr,tmp,s1,s2,l2,j,k,]
	activeOut:[arr,tmp,s1,s2,l2,j,k,]
==============
====Block15====
_label11: nop
i=s1
	prev:[14,13,]
	next:[16,]
	use:[s1,]
	def:[i,]
	activeIn:[tmp,s1,k,]
	activeOut:[tmp,i,k,]
==============
====Block16====
_label12: nop
#TMP26 = i < k
BZ #TMP26 _label13
	prev:[15,17,]
	next:[17,18,]
	use:[i,k,]
	def:[#TMP26,]
	activeIn:[tmp,i,k,]
	activeOut:[tmp,i,k,]
==============
====Block17====
#TMP27 = tmp [ i ] 
arr[i] =#TMP27
i = i + 1
GOTO _label12
	prev:[16,]
	next:[18,16,]
	use:[tmp,i,]
	def:[#TMP27,]
	activeIn:[tmp,i,k,]
	activeOut:[tmp,i,k,]
==============
====Block18====
_label13: nop
ret 
	prev:[17,16,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block19====
void inner_merge_sort()
para int start
para int length
#TMP28 = length <= 1
BZ #TMP28 _label14
	prev:[]
	next:[20,21,]
	use:[length,]
	def:[#TMP28,]
	activeIn:[arr,start,length,]
	activeOut:[arr,start,length,]
==============
====Block20====
ret 
	prev:[19,]
	next:[21,]
	use:[]
	def:[]
	activeIn:[arr,start,length,]
	activeOut:[arr,start,length,]
==============
====Block21====
_label14: nop
#TMP29 = length == 2
BZ #TMP29 _label15
	prev:[20,19,]
	next:[22,25,]
	use:[length,]
	def:[#TMP29,]
	activeIn:[arr,start,length,]
	activeOut:[arr,start,length,]
==============
====Block22====
#TMP30 = arr [ start ] 
#TMP31 = start + 1
#TMP32 = arr [ #TMP31 ] 
#TMP33 = #TMP30 > #TMP32
BZ #TMP33 _label16
	prev:[21,]
	next:[23,24,]
	use:[arr,start,]
	def:[#TMP33,#TMP32,#TMP31,#TMP30,]
	activeIn:[arr,start,length,]
	activeOut:[arr,start,length,]
==============
====Block23====
#TMP34 = arr [ start ] 
tmp=#TMP34
#TMP35 = start + 1
#TMP36 = arr [ #TMP35 ] 
arr[start] =#TMP36
#TMP37 = start + 1
arr[#TMP37] =tmp
	prev:[22,]
	next:[24,]
	use:[arr,start,]
	def:[#TMP37,#TMP36,#TMP35,#TMP34,tmp,]
	activeIn:[arr,start,length,]
	activeOut:[start,length,]
==============
====Block24====
_label16: nop
ret 
	prev:[23,22,]
	next:[25,]
	use:[]
	def:[]
	activeIn:[start,length,]
	activeOut:[start,length,]
==============
====Block25====
_label15: nop
#TMP38 = length / 2
mid=#TMP38
push start
push mid
call inner_merge_sort
	prev:[24,21,]
	next:[26,]
	use:[start,length,]
	def:[#TMP38,mid,]
	activeIn:[start,length,]
	activeOut:[start,length,mid,]
==============
====Block26====
#TMP40 = length - mid
#TMP39 = start + mid
push #TMP39
push #TMP40
call inner_merge_sort
	prev:[25,]
	next:[27,]
	use:[start,length,mid,]
	def:[#TMP40,#TMP39,]
	activeIn:[start,length,mid,]
	activeOut:[start,length,mid,]
==============
====Block27====
#TMP42 = length - mid
#TMP41 = start + mid
push start
push mid
push #TMP41
push #TMP42
call merge
	prev:[26,]
	next:[28,]
	use:[start,length,mid,]
	def:[#TMP42,#TMP41,]
	activeIn:[start,length,mid,]
	activeOut:[]
==============
====Block28====
ret 
	prev:[27,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block29====
void main()
syscall-4 17373248
syscall-11 10
n = syscall-5 
i=0
	prev:[]
	next:[30,]
	use:[]
	def:[n,i,]
	activeIn:[arr,]
	activeOut:[arr,n,i,]
==============
====Block30====
_label17: nop
#TMP43 = i < n
BZ #TMP43 _label18
	prev:[29,31,]
	next:[31,32,]
	use:[n,i,]
	def:[#TMP43,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block31====
a = syscall-5 
arr[i] =a
i = i + 1
GOTO _label17
	prev:[30,]
	next:[32,30,]
	use:[i,]
	def:[a,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block32====
_label18: nop
push 0
push n
call inner_merge_sort
	prev:[31,30,]
	next:[33,]
	use:[n,]
	def:[]
	activeIn:[arr,n,]
	activeOut:[arr,n,]
==============
====Block33====
i=0
	prev:[32,]
	next:[34,]
	use:[]
	def:[i,]
	activeIn:[arr,n,]
	activeOut:[arr,n,i,]
==============
====Block34====
_label19: nop
#TMP44 = i < n
BZ #TMP44 _label20
	prev:[33,35,]
	next:[35,36,]
	use:[n,i,]
	def:[#TMP44,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block35====
#TMP45 = arr [ i ] 
syscall-1 #TMP45
syscall-11 10
i = i + 1
GOTO _label19
	prev:[34,]
	next:[36,34,]
	use:[arr,i,]
	def:[#TMP45,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block36====
_label20: nop
	prev:[35,34,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============


global:
name:arr	id:0	type:int[]	scope:	addr:0	dimension:1000link:NULL
name:inner_merge_sort	id:10	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:2	paras:[11 12 ]
name:main	id:15	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:merge	id:2	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:4	paras:[3 4 5 6 ]
name:tmp	id:1	type:int[]	scope:	addr:4000	dimension:1000link:NULL
inner_merge_sort:
name:length	id:12	type:int	scope:inner_merge_sort	addr:108	dimension:0link:NULL
name:mid	id:14	type:int	scope:inner_merge_sort	addr:60	dimension:0link:NULL
name:start	id:11	type:int	scope:inner_merge_sort	addr:104	dimension:0link:NULL
name:tmp	id:13	type:int	scope:inner_merge_sort	addr:64	dimension:0link:NULL
tmp42 addr:0
tmp41 addr:4
tmp40 addr:8
tmp39 addr:12
tmp38 addr:16
tmp37 addr:20
tmp36 addr:24
tmp35 addr:28
tmp34 addr:32
tmp33 addr:36
tmp32 addr:40
tmp31 addr:44
tmp30 addr:48
tmp29 addr:52
tmp28 addr:56
main:
name:a	id:18	type:int	scope:main	addr:12	dimension:0link:NULL
name:i	id:17	type:int	scope:main	addr:16	dimension:0link:NULL
name:n	id:16	type:int	scope:main	addr:20	dimension:0link:NULL
tmp45 addr:0
tmp44 addr:4
tmp43 addr:8
merge:
name:i	id:7	type:int	scope:merge	addr:104	dimension:0link:NULL
name:j	id:8	type:int	scope:merge	addr:108	dimension:0link:NULL
name:k	id:9	type:int	scope:merge	addr:112	dimension:0link:NULL
name:l1	id:4	type:int	scope:merge	addr:156	dimension:0link:NULL
name:l2	id:6	type:int	scope:merge	addr:164	dimension:0link:NULL
name:s1	id:3	type:int	scope:merge	addr:152	dimension:0link:NULL
name:s2	id:5	type:int	scope:merge	addr:160	dimension:0link:NULL
tmp27 addr:0
tmp26 addr:4
tmp25 addr:8
tmp24 addr:12
tmp23 addr:16
tmp22 addr:20
tmp21 addr:24
tmp20 addr:28
tmp19 addr:32
tmp18 addr:36
tmp17 addr:40
tmp16 addr:44
tmp15 addr:48
tmp14 addr:52
tmp13 addr:56
tmp12 addr:60
tmp11 addr:64
tmp10 addr:68
tmp9 addr:72
tmp8 addr:76
tmp7 addr:80
tmp6 addr:84
tmp5 addr:88
tmp4 addr:92
tmp3 addr:96
tmp2 addr:100


