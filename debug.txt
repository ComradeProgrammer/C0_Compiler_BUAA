BEFORE BACKEND OPTIMIZATION
int chess[64]
int chess_record_num
int count_chess
int count_hanno
int hanno_flag
int hanno_record_num
int line
int hannuo()
para int n
para char one
para char two
para char three
#TMP2 = hanno_flag == 1
BZ #TMP2 _label2
ret 0
_label2: #TMP3 = n == 1
BZ #TMP3 _label3
count_hanno = count_hanno + 1
GOTO _label4
_label3: #TMP5 = n - 1
push #TMP5
push one
push three
push two
call hannuo
#TMP6=RET
count_hanno = count_hanno + 1
#TMP8 = count_hanno == hanno_record_num
BZ #TMP8 _label5
syscall-4 Step 
syscall-1 hanno_record_num
syscall-11 10
syscall-4 from 
syscall-11 one
syscall-11 10
syscall-4 to 
syscall-11 three
syscall-11 10
hanno_flag=1
_label5: #TMP9 = n - 1
push #TMP9
push two
push one
push three
call hannuo
#TMP10=RET
_label4: ret 0
int Fibonacci()
para int n
#TMP11 = n < 1
BZ #TMP11 _label6
ret 0
GOTO _label7
_label6: #TMP12 = n == 1
BZ #TMP12 _label8
ret 1
GOTO _label7
_label8: #TMP13 = n - 1
push #TMP13
call Fibonacci
#TMP14=RET
#TMP15 = n - 2
push #TMP15
call Fibonacci
#TMP16=RET
#TMP17 = #TMP14 + #TMP16
ret #TMP17
_label7: nop
int base
int Get_reminder()
para int n
base=1
#TMP18 = n < 10
BZ #TMP18 _label10
ret n
_label10: #TMP19 = n > base
GOTO _label12
_label11: base = base * 10
_label12: #TMP19 = n > base
BNZ #TMP19 _label11
base = base / 10
#TMP22 = n > base
GOTO _label14
_label13: n = n - base
_label14: #TMP22 = n > base
BNZ #TMP22 _label13
push n
call Get_reminder
#TMP24=RET
ret #TMP24
int Factorial()
para int i
#TMP25 = i > 1
BZ #TMP25 _label15
#TMP26 = i - 1
push #TMP26
call Factorial
#TMP27=RET
#TMP28 = i * #TMP27
ret #TMP28
GOTO _label16
_label15: ret 1
_label16: nop
int Sum()
para int n
#TMP29 = n < 1
BZ #TMP29 _label17
ret n
GOTO _label18
_label17: #TMP30 = n - 1
push #TMP30
call Sum
#TMP31=RET
#TMP32 = n + #TMP31
ret #TMP32
_label18: nop
int Sum_Factorial()
para int n
#TMP33 = n == 1
BZ #TMP33 _label19
ret 1
GOTO _label20
_label19: push n
call Factorial
#TMP34=RET
#TMP35 = n - 1
push #TMP35
call Sum_Factorial
#TMP36=RET
#TMP37 = #TMP34 + #TMP36
ret #TMP37
_label20: nop
int Permutation()
para int m
para int n
BNZ m _label21
ret 1
GOTO _label22
_label21: BNZ n _label23
ret 1
GOTO _label22
_label23: #TMP38 = m - 1
push #TMP38
push n
call Permutation
#TMP39=RET
#TMP40 = n - 1
push m
push #TMP40
call Permutation
#TMP41=RET
#TMP42 = #TMP39 + #TMP41
ret #TMP42
_label22: nop
int hanno_num
void main()
line = syscall-5 
hanno_num = syscall-5 
hanno_record_num = syscall-5 
count_chess=0
count_hanno=0
hanno_flag=0
push hanno_num
push 65
push 66
push 67
call hannuo
#TMP43=RET
syscall-1 count_hanno
syscall-11 10
push 4
call Fibonacci
#TMP44=RET
syscall-1 #TMP44
syscall-11 10
push 5
call Factorial
#TMP45=RET
syscall-1 #TMP45
syscall-11 10
push 10
call Sum
#TMP46=RET
syscall-1 #TMP46
syscall-11 10
push 5
call Sum_Factorial
#TMP47=RET
syscall-1 #TMP47
syscall-11 10
push 3464
call Get_reminder
#TMP48=RET
syscall-1 #TMP48
syscall-11 10
push 8
push 5
call Permutation
#TMP49=RET
syscall-1 #TMP49
syscall-11 10

====Block0====
int hannuo()
para int n
para char one
para char two
para char three
#TMP2 = hanno_flag == 1
BZ #TMP2 _label2
	prev:[]
	next:[1,2,]
	use:[hanno_flag,]
	def:[#TMP2,]
	activeIn:[count_hanno,hanno_record_num,hanno_flag,n,one,two,three,]
	activeOut:[count_hanno,hanno_record_num,n,one,two,three,]
==============
====Block1====
ret 0
	prev:[0,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block2====
_label2: #TMP3 = n == 1
BZ #TMP3 _label3
	prev:[0,]
	next:[3,4,]
	use:[n,]
	def:[#TMP3,]
	activeIn:[count_hanno,hanno_record_num,n,one,two,three,]
	activeOut:[count_hanno,hanno_record_num,n,one,two,three,]
==============
====Block3====
count_hanno = count_hanno + 1
GOTO _label4
	prev:[2,]
	next:[9,]
	use:[count_hanno,]
	def:[]
	activeIn:[count_hanno,]
	activeOut:[]
==============
====Block4====
_label3: #TMP5 = n - 1
push #TMP5
push one
push three
push two
call hannuo
	prev:[2,]
	next:[5,]
	use:[n,one,two,three,]
	def:[#TMP5,]
	activeIn:[count_hanno,hanno_record_num,n,one,two,three,]
	activeOut:[count_hanno,hanno_record_num,n,one,two,three,]
==============
====Block5====
count_hanno = count_hanno + 1
#TMP8 = count_hanno == hanno_record_num
BZ #TMP8 _label5
	prev:[4,]
	next:[6,7,]
	use:[count_hanno,hanno_record_num,]
	def:[#TMP8,]
	activeIn:[count_hanno,hanno_record_num,n,one,two,three,]
	activeOut:[hanno_record_num,n,one,two,three,]
==============
====Block6====
syscall-4 Step 
syscall-1 hanno_record_num
syscall-11 10
syscall-4 from 
syscall-11 one
syscall-11 10
syscall-4 to 
syscall-11 three
syscall-11 10
hanno_flag=1
	prev:[5,]
	next:[7,]
	use:[hanno_record_num,one,three,]
	def:[hanno_flag,]
	activeIn:[hanno_record_num,n,one,two,three,]
	activeOut:[n,one,two,three,]
==============
====Block7====
_label5: #TMP9 = n - 1
push #TMP9
push two
push one
push three
call hannuo
	prev:[6,5,]
	next:[8,]
	use:[n,one,two,three,]
	def:[#TMP9,]
	activeIn:[n,one,two,three,]
	activeOut:[]
==============
====Block8====
	prev:[7,]
	next:[9,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block9====
_label4: ret 0
	prev:[8,3,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block10====
int Fibonacci()
para int n
#TMP11 = n < 1
BZ #TMP11 _label6
	prev:[]
	next:[11,13,]
	use:[n,]
	def:[#TMP11,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block11====
ret 0
	prev:[10,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block12====
GOTO _label7
	prev:[]
	next:[19,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block13====
_label6: #TMP12 = n == 1
BZ #TMP12 _label8
	prev:[10,]
	next:[14,16,]
	use:[n,]
	def:[#TMP12,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block14====
ret 1
	prev:[13,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block15====
GOTO _label7
	prev:[]
	next:[19,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block16====
_label8: #TMP13 = n - 1
push #TMP13
call Fibonacci
	prev:[13,]
	next:[17,]
	use:[n,]
	def:[#TMP13,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block17====
#TMP14=RET
#TMP15 = n - 2
push #TMP15
call Fibonacci
	prev:[16,]
	next:[18,]
	use:[n,]
	def:[#TMP15,#TMP14,]
	activeIn:[n,]
	activeOut:[#TMP14,]
==============
====Block18====
#TMP16=RET
#TMP17 = #TMP14 + #TMP16
ret #TMP17
	prev:[17,]
	next:[]
	use:[#TMP14,]
	def:[#TMP17,#TMP16,]
	activeIn:[#TMP14,]
	activeOut:[]
==============
====Block19====
_label7: nop
	prev:[12,15,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block20====
int Get_reminder()
para int n
#TMP18 = n < 10
base=1
BZ #TMP18 _label10
	prev:[]
	next:[21,22,]
	use:[n,]
	def:[#TMP18,base,]
	activeIn:[n,]
	activeOut:[n,base,]
==============
====Block21====
ret n
	prev:[20,]
	next:[]
	use:[n,]
	def:[]
	activeIn:[n,]
	activeOut:[]
==============
====Block22====
_label10: GOTO _label12
	prev:[20,]
	next:[24,]
	use:[]
	def:[]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block23====
_label11: base = base * 10
	prev:[24,]
	next:[24,]
	use:[base,]
	def:[]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block24====
_label12: #TMP19 = n > base
BNZ #TMP19 _label11
	prev:[23,22,]
	next:[25,23,]
	use:[n,base,]
	def:[#TMP19,]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block25====
base = base / 10
GOTO _label14
	prev:[24,]
	next:[27,]
	use:[base,]
	def:[]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block26====
_label13: n = n - base
	prev:[27,]
	next:[27,]
	use:[n,base,]
	def:[]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block27====
_label14: #TMP22 = n > base
BNZ #TMP22 _label13
	prev:[26,25,]
	next:[28,26,]
	use:[n,base,]
	def:[#TMP22,]
	activeIn:[n,base,]
	activeOut:[n,base,]
==============
====Block28====
push n
call Get_reminder
	prev:[27,]
	next:[29,]
	use:[n,]
	def:[]
	activeIn:[n,]
	activeOut:[]
==============
====Block29====
#TMP24=RET
ret #TMP24
	prev:[28,]
	next:[]
	use:[]
	def:[#TMP24,]
	activeIn:[]
	activeOut:[]
==============
====Block30====
int Factorial()
para int i
#TMP25 = i > 1
BZ #TMP25 _label15
	prev:[]
	next:[31,34,]
	use:[i,]
	def:[#TMP25,]
	activeIn:[i,]
	activeOut:[i,]
==============
====Block31====
#TMP26 = i - 1
push #TMP26
call Factorial
	prev:[30,]
	next:[32,]
	use:[i,]
	def:[#TMP26,]
	activeIn:[i,]
	activeOut:[i,]
==============
====Block32====
#TMP27=RET
#TMP28 = i * #TMP27
ret #TMP28
	prev:[31,]
	next:[]
	use:[i,]
	def:[#TMP28,#TMP27,]
	activeIn:[i,]
	activeOut:[]
==============
====Block33====
GOTO _label16
	prev:[]
	next:[35,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block34====
_label15: ret 1
	prev:[30,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block35====
_label16: nop
	prev:[33,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block36====
int Sum()
para int n
#TMP29 = n < 1
BZ #TMP29 _label17
	prev:[]
	next:[37,39,]
	use:[n,]
	def:[#TMP29,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block37====
ret n
	prev:[36,]
	next:[]
	use:[n,]
	def:[]
	activeIn:[n,]
	activeOut:[]
==============
====Block38====
GOTO _label18
	prev:[]
	next:[41,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block39====
_label17: #TMP30 = n - 1
push #TMP30
call Sum
	prev:[36,]
	next:[40,]
	use:[n,]
	def:[#TMP30,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block40====
#TMP31=RET
#TMP32 = n + #TMP31
ret #TMP32
	prev:[39,]
	next:[]
	use:[n,]
	def:[#TMP32,#TMP31,]
	activeIn:[n,]
	activeOut:[]
==============
====Block41====
_label18: nop
	prev:[38,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block42====
int Sum_Factorial()
para int n
#TMP33 = n == 1
BZ #TMP33 _label19
	prev:[]
	next:[43,45,]
	use:[n,]
	def:[#TMP33,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block43====
ret 1
	prev:[42,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block44====
GOTO _label20
	prev:[]
	next:[48,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block45====
_label19: push n
call Factorial
	prev:[42,]
	next:[46,]
	use:[n,]
	def:[]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block46====
#TMP34=RET
#TMP35 = n - 1
push #TMP35
call Sum_Factorial
	prev:[45,]
	next:[47,]
	use:[n,]
	def:[#TMP35,#TMP34,]
	activeIn:[n,]
	activeOut:[#TMP34,]
==============
====Block47====
#TMP36=RET
#TMP37 = #TMP34 + #TMP36
ret #TMP37
	prev:[46,]
	next:[]
	use:[#TMP34,]
	def:[#TMP37,#TMP36,]
	activeIn:[#TMP34,]
	activeOut:[]
==============
====Block48====
_label20: nop
	prev:[44,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block49====
int Permutation()
para int m
para int n
BNZ m _label21
	prev:[]
	next:[50,52,]
	use:[m,]
	def:[]
	activeIn:[m,n,]
	activeOut:[m,n,]
==============
====Block50====
ret 1
	prev:[49,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block51====
GOTO _label22
	prev:[]
	next:[58,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block52====
_label21: BNZ n _label23
	prev:[49,]
	next:[53,55,]
	use:[n,]
	def:[]
	activeIn:[m,n,]
	activeOut:[m,n,]
==============
====Block53====
ret 1
	prev:[52,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block54====
GOTO _label22
	prev:[]
	next:[58,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block55====
_label23: #TMP38 = m - 1
push #TMP38
push n
call Permutation
	prev:[52,]
	next:[56,]
	use:[m,n,]
	def:[#TMP38,]
	activeIn:[m,n,]
	activeOut:[m,n,]
==============
====Block56====
#TMP39=RET
#TMP40 = n - 1
push m
push #TMP40
call Permutation
	prev:[55,]
	next:[57,]
	use:[m,n,]
	def:[#TMP40,#TMP39,]
	activeIn:[m,n,]
	activeOut:[#TMP39,]
==============
====Block57====
#TMP41=RET
#TMP42 = #TMP39 + #TMP41
ret #TMP42
	prev:[56,]
	next:[]
	use:[#TMP39,]
	def:[#TMP42,#TMP41,]
	activeIn:[#TMP39,]
	activeOut:[]
==============
====Block58====
_label22: nop
	prev:[51,54,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block59====
void main()
line = syscall-5 
	prev:[]
	next:[60,]
	use:[]
	def:[line,]
	activeIn:[]
	activeOut:[]
==============
====Block60====
hanno_num = syscall-5 
	prev:[59,]
	next:[61,]
	use:[]
	def:[hanno_num,]
	activeIn:[]
	activeOut:[hanno_num,]
==============
====Block61====
hanno_record_num = syscall-5 
	prev:[60,]
	next:[62,]
	use:[]
	def:[hanno_record_num,]
	activeIn:[hanno_num,]
	activeOut:[hanno_num,]
==============
====Block62====
count_chess=0
count_hanno=0
hanno_flag=0
push hanno_num
push 65
push 66
push 67
call hannuo
	prev:[61,]
	next:[63,]
	use:[hanno_num,]
	def:[count_chess,count_hanno,hanno_flag,]
	activeIn:[hanno_num,]
	activeOut:[count_hanno,]
==============
====Block63====
syscall-1 count_hanno
syscall-11 10
push 4
call Fibonacci
	prev:[62,]
	next:[64,]
	use:[count_hanno,]
	def:[]
	activeIn:[count_hanno,]
	activeOut:[]
==============
====Block64====
#TMP44=RET
syscall-1 #TMP44
syscall-11 10
push 5
call Factorial
	prev:[63,]
	next:[65,]
	use:[]
	def:[#TMP44,]
	activeIn:[]
	activeOut:[]
==============
====Block65====
#TMP45=RET
syscall-1 #TMP45
syscall-11 10
push 10
call Sum
	prev:[64,]
	next:[66,]
	use:[]
	def:[#TMP45,]
	activeIn:[]
	activeOut:[]
==============
====Block66====
#TMP46=RET
syscall-1 #TMP46
syscall-11 10
push 5
call Sum_Factorial
	prev:[65,]
	next:[67,]
	use:[]
	def:[#TMP46,]
	activeIn:[]
	activeOut:[]
==============
====Block67====
#TMP47=RET
syscall-1 #TMP47
syscall-11 10
push 3464
call Get_reminder
	prev:[66,]
	next:[68,]
	use:[]
	def:[#TMP47,]
	activeIn:[]
	activeOut:[]
==============
====Block68====
#TMP48=RET
syscall-1 #TMP48
syscall-11 10
push 8
push 5
call Permutation
	prev:[67,]
	next:[69,]
	use:[]
	def:[#TMP48,]
	activeIn:[]
	activeOut:[]
==============
====Block69====
#TMP49=RET
syscall-1 #TMP49
syscall-11 10
	prev:[68,]
	next:[]
	use:[]
	def:[#TMP49,]
	activeIn:[]
	activeOut:[]
==============


BEFORE BACKEND OPTIMIZATION
int chess[64]
int chess_record_num
int count_chess
int count_hanno
int hanno_flag
int hanno_record_num
int line
int hannuo()
para int n
para char one
para char two
para char three
#TMP2 = hanno_flag == 1
BZ #TMP2 _label2
ret 0
_label2: #TMP3 = n == 1
BZ #TMP3 _label3
count_hanno = count_hanno + 1
GOTO _label4
_label3: #TMP5 = n - 1
push #TMP5
push one
push three
push two
call hannuo
count_hanno = count_hanno + 1
#TMP8 = count_hanno == hanno_record_num
BZ #TMP8 _label5
syscall-4 Step 
syscall-1 hanno_record_num
syscall-11 10
syscall-4 from 
syscall-11 one
syscall-11 10
syscall-4 to 
syscall-11 three
syscall-11 10
hanno_flag=1
_label5: #TMP9 = n - 1
push #TMP9
push two
push one
push three
call hannuo
_label4: ret 0
int Fibonacci()
para int n
#TMP11 = n < 1
BZ #TMP11 _label6
ret 0
GOTO _label7
_label6: #TMP12 = n == 1
BZ #TMP12 _label8
ret 1
GOTO _label7
_label8: #TMP13 = n - 1
push #TMP13
call Fibonacci
#TMP14=RET
#TMP15 = n - 2
push #TMP15
call Fibonacci
#TMP16=RET
#TMP17 = #TMP14 + #TMP16
ret #TMP17
_label7: nop
int base
int Get_reminder()
para int n
#TMP18 = n < 10
base=1
BZ #TMP18 _label10
ret n
_label10: GOTO _label12
_label11: base = base * 10
_label12: #TMP19 = n > base
BNZ #TMP19 _label11
base = base / 10
GOTO _label14
_label13: n = n - base
_label14: #TMP22 = n > base
BNZ #TMP22 _label13
push n
call Get_reminder
#TMP24=RET
ret #TMP24
int Factorial()
para int i
#TMP25 = i > 1
BZ #TMP25 _label15
#TMP26 = i - 1
push #TMP26
call Factorial
#TMP27=RET
#TMP28 = i * #TMP27
ret #TMP28
GOTO _label16
_label15: ret 1
_label16: nop
int Sum()
para int n
#TMP29 = n < 1
BZ #TMP29 _label17
ret n
GOTO _label18
_label17: #TMP30 = n - 1
push #TMP30
call Sum
#TMP31=RET
#TMP32 = n + #TMP31
ret #TMP32
_label18: nop
int Sum_Factorial()
para int n
#TMP33 = n == 1
BZ #TMP33 _label19
ret 1
GOTO _label20
_label19: push n
call Factorial
#TMP34=RET
#TMP35 = n - 1
push #TMP35
call Sum_Factorial
#TMP36=RET
#TMP37 = #TMP34 + #TMP36
ret #TMP37
_label20: nop
int Permutation()
para int m
para int n
BNZ m _label21
ret 1
GOTO _label22
_label21: BNZ n _label23
ret 1
GOTO _label22
_label23: #TMP38 = m - 1
push #TMP38
push n
call Permutation
#TMP39=RET
#TMP40 = n - 1
push m
push #TMP40
call Permutation
#TMP41=RET
#TMP42 = #TMP39 + #TMP41
ret #TMP42
_label22: nop
int hanno_num
void main()
line = syscall-5 
hanno_num = syscall-5 
hanno_record_num = syscall-5 
count_chess=0
count_hanno=0
hanno_flag=0
push hanno_num
push 65
push 66
push 67
call hannuo
syscall-1 count_hanno
syscall-11 10
push 4
call Fibonacci
#TMP44=RET
syscall-1 #TMP44
syscall-11 10
push 5
call Factorial
#TMP45=RET
syscall-1 #TMP45
syscall-11 10
push 10
call Sum
#TMP46=RET
syscall-1 #TMP46
syscall-11 10
push 5
call Sum_Factorial
#TMP47=RET
syscall-1 #TMP47
syscall-11 10
push 3464
call Get_reminder
#TMP48=RET
syscall-1 #TMP48
syscall-11 10
push 8
push 5
call Permutation
#TMP49=RET
syscall-1 #TMP49
syscall-11 10


SYMBOLTABLE
global:
name:Factorial	id:17	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[18 ]
name:Fibonacci	id:12	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[13 ]
name:Get_reminder	id:14	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[15 ]
name:Permutation	id:23	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:2	paras:[24 25 ]
name:Sum	id:19	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[20 ]
name:Sum_Factorial	id:21	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[22 ]
name:chess	id:1	type:int[]	scope:	addr:0	dimension:64link:NULL
name:chess_record_num	id:4	type:int	scope:	addr:256	dimension:0link:NULL
name:count_chess	id:2	type:int	scope:	addr:260	dimension:0link:NULL
name:count_hanno	id:3	type:int	scope:	addr:264	dimension:0link:NULL
name:hanno_flag	id:6	type:int	scope:	addr:268	dimension:0link:NULL
name:hanno_record_num	id:5	type:int	scope:	addr:272	dimension:0link:NULL
name:hannuo	id:7	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:4	paras:[8 9 10 11 ]
name:line	id:0	type:int	scope:	addr:276	dimension:0link:NULL
name:main	id:26	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
Factorial:
name:i	id:18	type:int	scope:Factorial	addr:52	dimension:0link:NULL
tmp28 addr:0
tmp27 addr:4
tmp26 addr:8
tmp25 addr:12
Fibonacci:
name:n	id:13	type:int	scope:Fibonacci	addr:64	dimension:0link:NULL
tmp17 addr:0
tmp16 addr:4
tmp15 addr:8
tmp14 addr:12
tmp13 addr:16
tmp12 addr:20
tmp11 addr:24
Get_reminder:
name:base	id:16	type:int	scope:Get_reminder	addr:16	dimension:0link:NULL
name:n	id:15	type:int	scope:Get_reminder	addr:56	dimension:0link:NULL
tmp24 addr:0
tmp22 addr:4
tmp19 addr:8
tmp18 addr:12
Permutation:
name:m	id:24	type:int	scope:Permutation	addr:56	dimension:0link:NULL
name:n	id:25	type:int	scope:Permutation	addr:60	dimension:0link:NULL
tmp42 addr:0
tmp41 addr:4
tmp40 addr:8
tmp39 addr:12
tmp38 addr:16
Sum:
name:n	id:20	type:int	scope:Sum	addr:52	dimension:0link:NULL
tmp32 addr:0
tmp31 addr:4
tmp30 addr:8
tmp29 addr:12
Sum_Factorial:
name:n	id:22	type:int	scope:Sum_Factorial	addr:56	dimension:0link:NULL
tmp37 addr:0
tmp36 addr:4
tmp35 addr:8
tmp34 addr:12
tmp33 addr:16
hannuo:
name:n	id:8	type:int	scope:hannuo	addr:56	dimension:0link:NULL
name:one	id:9	type:char	scope:hannuo	addr:60	dimension:0link:NULL
name:three	id:11	type:char	scope:hannuo	addr:68	dimension:0link:NULL
name:two	id:10	type:char	scope:hannuo	addr:64	dimension:0link:NULL
tmp9 addr:0
tmp8 addr:4
tmp5 addr:8
tmp3 addr:12
tmp2 addr:16
main:
name:hanno_num	id:27	type:int	scope:main	addr:24	dimension:0link:NULL
tmp49 addr:0
tmp48 addr:4
tmp47 addr:8
tmp46 addr:12
tmp45 addr:16
tmp44 addr:20


