const int MAX_NUM
char factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
ret 1
_label2: #TMP3 = n - 1
push #TMP3
call factorial
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
char mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
int temp
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
y=temp
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 y
syscall-11 10
ret 
char full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
char flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()
j=2
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
n=-1
s=j
i=1
_label5: #TMP22 = i < j
BZ #TMP22 _label6
#TMP23 = j / i
x1 = #TMP23 * i
push j
push i
call mod
#TMP25=RET
#TMP26 = #TMP25 == 0
BZ #TMP26 _label7
n = n + 1
s = s - i
#TMP29 = n >= 128
BZ #TMP29 _label8
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
_label8: k[n] =i
_label7: i = i + 1
GOTO _label5
_label6: #TMP30 = s == 0
BZ #TMP30 _label10
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
_label11: #TMP31 = i <= n
BZ #TMP31 _label12
syscall-4   
#TMP32 = k [ i ] 
syscall-1 #TMP32
syscall-11 10
i = i + 1
GOTO _label11
_label12: syscall-4  
syscall-11 10
_label10: j = j + 1
GOTO _label3
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
y=0
i=100
_label13: #TMP33 = 100 + 128
#TMP34 = i < #TMP33
BZ #TMP34 _label14
n = i / 100
#TMP36 = i / 10
push #TMP36
push 10
call mod
j=RET
push i
push 10
call mod
a=RET
push n
push j
push a
call full_num
#TMP39=RET
push n
push j
push a
call flower_num
#TMP40=RET
#TMP41 = #TMP39 == #TMP40
BZ #TMP41 _label15
k[y] =i
y = y + 1
_label15: i = i + 1
GOTO _label13
_label14: i=0
_label16: #TMP43 = i < y
BZ #TMP43 _label17
syscall-4   
#TMP44 = k [ i ] 
syscall-1 #TMP44
syscall-11 10
i = i + 1
GOTO _label16
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
h=0
leap=1
m=2
_label18: #TMP45 = m <= 128
BZ #TMP45 _label19
k2 = m / 2
i=2
_label20: #TMP47 = i <= k2
BZ #TMP47 _label21
#TMP48 = m / i
x2 = #TMP48 * i
push m
push i
call mod
#TMP50=RET
#TMP51 = #TMP50 == 0
BZ #TMP51 _label22
leap=0
_label22: i = i + 1
GOTO _label20
_label21: #TMP52 = leap == 1
BZ #TMP52 _label23
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP54 = h / 10
x2 = #TMP54 * 10
#TMP56 = x2 == h
BZ #TMP56 _label23
syscall-4  
syscall-11 10
_label23: leap=1
m = m + 1
GOTO _label18
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
int n
void main()
push 5
call factorial
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
push 5
push 10
call swap
call complete_flower_num

====Block0====
char factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
	prev:[]
	next:[1,2,]
	use:[n,]
	def:[#TMP2,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block1====
ret 1
	prev:[0,]
	next:[2,]
	use:[]
	def:[]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block2====
_label2: #TMP3 = n - 1
push #TMP3
call factorial
	prev:[1,0,]
	next:[3,]
	use:[n,]
	def:[#TMP3,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block3====
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
	prev:[2,]
	next:[]
	use:[n,]
	def:[#TMP5,#TMP4,]
	activeIn:[n,]
	activeOut:[]
==============
====Block4====
char mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
	prev:[]
	next:[]
	use:[x,y,]
	def:[#TMP7,#TMP6,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block5====
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
y=temp
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 y
syscall-11 10
ret 
	prev:[]
	next:[]
	use:[x,y,]
	def:[temp,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block6====
char full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP12,#TMP11,#TMP10,#TMP9,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block7====
char flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP20,#TMP19,#TMP18,#TMP17,#TMP16,#TMP15,#TMP14,#TMP13,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block8====
void complete_flower_num()
j=2
	prev:[]
	next:[9,]
	use:[]
	def:[j,]
	activeIn:[k,]
	activeOut:[k,j,]
==============
====Block9====
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
	prev:[8,23,]
	next:[10,24,]
	use:[j,]
	def:[#TMP21,]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block10====
n=-1
s=j
i=1
	prev:[9,]
	next:[11,]
	use:[j,]
	def:[i,n,s,]
	activeIn:[k,j,]
	activeOut:[k,i,j,n,s,]
==============
====Block11====
_label5: #TMP22 = i < j
BZ #TMP22 _label6
	prev:[10,17,]
	next:[12,18,]
	use:[i,j,]
	def:[#TMP22,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block12====
#TMP23 = j / i
x1 = #TMP23 * i
push j
push i
call mod
	prev:[11,]
	next:[13,]
	use:[i,j,]
	def:[#TMP23,x1,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block13====
#TMP25=RET
#TMP26 = #TMP25 == 0
BZ #TMP26 _label7
	prev:[12,]
	next:[14,17,]
	use:[]
	def:[#TMP26,#TMP25,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block14====
n = n + 1
s = s - i
#TMP29 = n >= 128
BZ #TMP29 _label8
	prev:[13,]
	next:[15,16,]
	use:[i,n,s,]
	def:[#TMP29,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block15====
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
	prev:[14,]
	next:[16,17,]
	use:[]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block16====
_label8: k[n] =i
	prev:[15,14,]
	next:[17,]
	use:[i,n,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block17====
_label7: i = i + 1
GOTO _label5
	prev:[16,13,15,]
	next:[18,11,]
	use:[i,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block18====
_label6: #TMP30 = s == 0
BZ #TMP30 _label10
	prev:[17,11,]
	next:[19,23,]
	use:[s,]
	def:[#TMP30,]
	activeIn:[k,j,n,s,]
	activeOut:[k,j,n,]
==============
====Block19====
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
	prev:[18,]
	next:[20,]
	use:[j,]
	def:[i,]
	activeIn:[k,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block20====
_label11: #TMP31 = i <= n
BZ #TMP31 _label12
	prev:[19,21,]
	next:[21,22,]
	use:[i,n,]
	def:[#TMP31,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block21====
syscall-4   
#TMP32 = k [ i ] 
syscall-1 #TMP32
syscall-11 10
i = i + 1
GOTO _label11
	prev:[20,]
	next:[22,20,]
	use:[k,i,]
	def:[#TMP32,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block22====
_label12: syscall-4  
syscall-11 10
	prev:[21,20,]
	next:[23,]
	use:[]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block23====
_label10: j = j + 1
GOTO _label3
	prev:[22,18,]
	next:[24,9,]
	use:[j,]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block24====
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
y=0
i=100
	prev:[23,9,]
	next:[25,]
	use:[]
	def:[i,y,]
	activeIn:[k,]
	activeOut:[k,i,y,]
==============
====Block25====
_label13: #TMP33 = 100 + 128
#TMP34 = i < #TMP33
BZ #TMP34 _label14
	prev:[24,32,]
	next:[26,33,]
	use:[i,]
	def:[#TMP34,#TMP33,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block26====
n = i / 100
#TMP36 = i / 10
push #TMP36
push 10
call mod
	prev:[25,]
	next:[27,]
	use:[i,]
	def:[#TMP36,n,]
	activeIn:[k,i,y,]
	activeOut:[k,i,n,y,]
==============
====Block27====
j=RET
push i
push 10
call mod
	prev:[26,]
	next:[28,]
	use:[i,]
	def:[j,]
	activeIn:[k,i,n,y,]
	activeOut:[k,i,j,n,y,]
==============
====Block28====
a=RET
push n
push j
push a
call full_num
	prev:[27,]
	next:[29,]
	use:[j,n,]
	def:[a,]
	activeIn:[k,i,j,n,y,]
	activeOut:[k,i,j,n,y,a,]
==============
====Block29====
#TMP39=RET
push n
push j
push a
call flower_num
	prev:[28,]
	next:[30,]
	use:[j,n,a,]
	def:[#TMP39,]
	activeIn:[k,i,j,n,y,a,]
	activeOut:[#TMP39,k,i,y,]
==============
====Block30====
#TMP40=RET
#TMP41 = #TMP39 == #TMP40
BZ #TMP41 _label15
	prev:[29,]
	next:[31,32,]
	use:[#TMP39,]
	def:[#TMP41,#TMP40,]
	activeIn:[#TMP39,k,i,y,]
	activeOut:[k,i,y,]
==============
====Block31====
k[y] =i
y = y + 1
	prev:[30,]
	next:[32,]
	use:[i,y,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block32====
_label15: i = i + 1
GOTO _label13
	prev:[31,30,]
	next:[33,25,]
	use:[i,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block33====
_label14: i=0
	prev:[32,25,]
	next:[34,]
	use:[]
	def:[i,]
	activeIn:[k,y,]
	activeOut:[k,i,y,]
==============
====Block34====
_label16: #TMP43 = i < y
BZ #TMP43 _label17
	prev:[33,35,]
	next:[35,36,]
	use:[i,y,]
	def:[#TMP43,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block35====
syscall-4   
#TMP44 = k [ i ] 
syscall-1 #TMP44
syscall-11 10
i = i + 1
GOTO _label16
	prev:[34,]
	next:[36,34,]
	use:[k,i,]
	def:[#TMP44,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block36====
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
h=0
leap=1
m=2
	prev:[35,34,]
	next:[37,]
	use:[]
	def:[m,h,leap,]
	activeIn:[]
	activeOut:[m,h,leap,]
==============
====Block37====
_label18: #TMP45 = m <= 128
BZ #TMP45 _label19
	prev:[36,47,]
	next:[38,48,]
	use:[m,]
	def:[#TMP45,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,leap,]
==============
====Block38====
k2 = m / 2
i=2
	prev:[37,]
	next:[39,]
	use:[m,]
	def:[i,k2,]
	activeIn:[m,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block39====
_label20: #TMP47 = i <= k2
BZ #TMP47 _label21
	prev:[38,43,]
	next:[40,44,]
	use:[i,k2,]
	def:[#TMP47,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block40====
#TMP48 = m / i
x2 = #TMP48 * i
push m
push i
call mod
	prev:[39,]
	next:[41,]
	use:[i,m,]
	def:[#TMP48,x2,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block41====
#TMP50=RET
#TMP51 = #TMP50 == 0
BZ #TMP51 _label22
	prev:[40,]
	next:[42,43,]
	use:[]
	def:[#TMP51,#TMP50,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block42====
leap=0
	prev:[41,]
	next:[43,]
	use:[]
	def:[leap,]
	activeIn:[i,m,k2,h,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block43====
_label22: i = i + 1
GOTO _label20
	prev:[42,41,]
	next:[44,39,]
	use:[i,]
	def:[]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block44====
_label21: #TMP52 = leap == 1
BZ #TMP52 _label23
	prev:[43,39,]
	next:[45,47,]
	use:[leap,]
	def:[#TMP52,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,]
==============
====Block45====
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP54 = h / 10
x2 = #TMP54 * 10
#TMP56 = x2 == h
BZ #TMP56 _label23
	prev:[44,]
	next:[46,47,]
	use:[m,h,]
	def:[#TMP56,#TMP54,x2,]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block46====
syscall-4  
syscall-11 10
	prev:[45,]
	next:[47,]
	use:[]
	def:[]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block47====
_label23: leap=1
m = m + 1
GOTO _label18
	prev:[46,44,45,]
	next:[48,37,]
	use:[m,]
	def:[leap,]
	activeIn:[m,h,]
	activeOut:[m,h,leap,]
==============
====Block48====
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
	prev:[47,37,]
	next:[]
	use:[h,]
	def:[]
	activeIn:[h,]
	activeOut:[]
==============
====Block49====
void main()
push 5
call factorial
	prev:[]
	next:[50,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block50====
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
push 5
push 10
call swap
	prev:[49,]
	next:[51,]
	use:[]
	def:[n,]
	activeIn:[]
	activeOut:[]
==============
====Block51====
call complete_flower_num
	prev:[50,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============


const int MAX_NUM
char factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
ret 1
_label2: #TMP3 = n - 1
push #TMP3
call factorial
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
char mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
int temp
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
y=temp
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 y
syscall-11 10
ret 
char full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
char flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()
j=2
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
n=-1
s=j
i=1
_label5: #TMP22 = i < j
BZ #TMP22 _label6
#TMP23 = j / i
x1 = #TMP23 * i
push j
push i
call mod
#TMP25=RET
#TMP26 = #TMP25 == 0
BZ #TMP26 _label7
n = n + 1
s = s - i
#TMP29 = n >= 128
BZ #TMP29 _label8
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
_label8: k[n] =i
_label7: i = i + 1
GOTO _label5
_label6: #TMP30 = s == 0
BZ #TMP30 _label10
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
_label11: #TMP31 = i <= n
BZ #TMP31 _label12
syscall-4   
#TMP32 = k [ i ] 
syscall-1 #TMP32
syscall-11 10
i = i + 1
GOTO _label11
_label12: syscall-4  
syscall-11 10
_label10: j = j + 1
GOTO _label3
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
y=0
i=100
_label13: #TMP33 = 100 + 128
#TMP34 = i < #TMP33
BZ #TMP34 _label14
n = i / 100
#TMP36 = i / 10
push #TMP36
push 10
call mod
j=RET
push i
push 10
call mod
a=RET
push n
push j
push a
call full_num
#TMP39=RET
push n
push j
push a
call flower_num
#TMP40=RET
#TMP41 = #TMP39 == #TMP40
BZ #TMP41 _label15
k[y] =i
y = y + 1
_label15: i = i + 1
GOTO _label13
_label14: i=0
_label16: #TMP43 = i < y
BZ #TMP43 _label17
syscall-4   
#TMP44 = k [ i ] 
syscall-1 #TMP44
syscall-11 10
i = i + 1
GOTO _label16
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
h=0
leap=1
m=2
_label18: #TMP45 = m <= 128
BZ #TMP45 _label19
k2 = m / 2
i=2
_label20: #TMP47 = i <= k2
BZ #TMP47 _label21
#TMP48 = m / i
x2 = #TMP48 * i
push m
push i
call mod
#TMP50=RET
#TMP51 = #TMP50 == 0
BZ #TMP51 _label22
leap=0
_label22: i = i + 1
GOTO _label20
_label21: #TMP52 = leap == 1
BZ #TMP52 _label23
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP54 = h / 10
x2 = #TMP54 * 10
#TMP56 = x2 == h
BZ #TMP56 _label23
syscall-4  
syscall-11 10
_label23: leap=1
m = m + 1
GOTO _label18
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
int n
void main()
push 5
call factorial
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
push 5
push 10
call swap
call complete_flower_num


global:
name:MAX_NUM	id:0	type:const int	scope:	addr:0	dimension:0link:NULL
name:complete_flower_num	id:18	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:factorial	id:1	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[2 ]
name:flower_num	id:14	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[15 16 17 ]
name:full_num	id:10	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[11 12 13 ]
name:main	id:34	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:mod	id:3	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:2	paras:[4 5 ]
name:swap	id:6	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:2	paras:[7 8 ]
complete_flower_num:
name:a	id:31	type:int	scope:complete_flower_num	addr:612	dimension:0link:NULL
name:b	id:32	type:int	scope:complete_flower_num	addr:616	dimension:0link:NULL
name:c	id:33	type:int	scope:complete_flower_num	addr:620	dimension:0link:NULL
name:h	id:28	type:int	scope:complete_flower_num	addr:624	dimension:0link:NULL
name:i	id:20	type:int	scope:complete_flower_num	addr:628	dimension:0link:NULL
name:j	id:21	type:int	scope:complete_flower_num	addr:632	dimension:0link:NULL
name:k	id:19	type:int[]	scope:complete_flower_num	addr:100	dimension:128link:NULL
name:k2	id:27	type:int	scope:complete_flower_num	addr:636	dimension:0link:NULL
name:leap	id:29	type:int	scope:complete_flower_num	addr:640	dimension:0link:NULL
name:m	id:26	type:int	scope:complete_flower_num	addr:644	dimension:0link:NULL
name:n	id:22	type:int	scope:complete_flower_num	addr:648	dimension:0link:NULL
name:s	id:23	type:int	scope:complete_flower_num	addr:652	dimension:0link:NULL
name:x1	id:24	type:int	scope:complete_flower_num	addr:656	dimension:0link:NULL
name:x2	id:30	type:int	scope:complete_flower_num	addr:660	dimension:0link:NULL
name:y	id:25	type:int	scope:complete_flower_num	addr:664	dimension:0link:NULL
tmp56 addr:0
tmp54 addr:4
tmp52 addr:8
tmp51 addr:12
tmp50 addr:16
tmp48 addr:20
tmp47 addr:24
tmp45 addr:28
tmp44 addr:32
tmp43 addr:36
tmp41 addr:40
tmp40 addr:44
tmp39 addr:48
tmp36 addr:52
tmp34 addr:56
tmp33 addr:60
tmp32 addr:64
tmp31 addr:68
tmp30 addr:72
tmp29 addr:76
tmp26 addr:80
tmp25 addr:84
tmp23 addr:88
tmp22 addr:92
tmp21 addr:96
factorial:
name:n	id:2	type:int	scope:factorial	addr:52	dimension:0link:NULL
tmp5 addr:0
tmp4 addr:4
tmp3 addr:8
tmp2 addr:12
flower_num:
name:a	id:17	type:int	scope:flower_num	addr:76	dimension:0link:NULL
name:j	id:16	type:int	scope:flower_num	addr:72	dimension:0link:NULL
name:n	id:15	type:int	scope:flower_num	addr:68	dimension:0link:NULL
tmp20 addr:0
tmp19 addr:4
tmp18 addr:8
tmp17 addr:12
tmp16 addr:16
tmp15 addr:20
tmp14 addr:24
tmp13 addr:28
full_num:
name:a	id:13	type:int	scope:full_num	addr:60	dimension:0link:NULL
name:j	id:12	type:int	scope:full_num	addr:56	dimension:0link:NULL
name:n	id:11	type:int	scope:full_num	addr:52	dimension:0link:NULL
tmp12 addr:0
tmp11 addr:4
tmp10 addr:8
tmp9 addr:12
main:
name:n	id:35	type:int	scope:main	addr:0	dimension:0link:NULL
mod:
name:x	id:4	type:int	scope:mod	addr:44	dimension:0link:NULL
name:y	id:5	type:int	scope:mod	addr:48	dimension:0link:NULL
tmp7 addr:0
tmp6 addr:4
swap:
name:temp	id:9	type:int	scope:swap	addr:0	dimension:0link:NULL
name:x	id:7	type:int	scope:swap	addr:40	dimension:0link:NULL
name:y	id:8	type:int	scope:swap	addr:44	dimension:0link:NULL


