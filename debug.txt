const int MAX_NUM
int factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
ret 1
_label2: #TMP3 = n - 1
push #TMP3
call factorial
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
int mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
int temp
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
y=temp
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 y
syscall-11 10
ret 
int full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
int flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()
j=2
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
n=-1
s=j
i=1
_label5: #TMP22 = i < j
BZ #TMP22 _label6
#TMP23 = j / i
x1 = #TMP23 * i
#TMP27=j
#TMP28=i
#TMP29 = #TMP27 / #TMP28
#TMP30 = #TMP29 * #TMP28
#TMP27 = #TMP27 - #TMP30
#TMP26=#TMP27
#TMP25=#TMP26
BNZ #TMP25 _label7
n = n + 1
s = s - i
#TMP33 = n >= 128
BZ #TMP33 _label8
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
_label8: k[n] =i
_label7: i = i + 1
GOTO _label5
_label6: BNZ s _label10
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
_label11: #TMP34 = i <= n
BZ #TMP34 _label12
syscall-4   
#TMP35 = k [ i ] 
syscall-1 #TMP35
syscall-11 10
i = i + 1
GOTO _label11
_label12: syscall-4  
syscall-11 10
_label10: j = j + 1
GOTO _label3
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
y=0
i=100
_label13: #TMP36 = 100 + 128
#TMP37 = i < #TMP36
BZ #TMP37 _label14
n = i / 100
#TMP39 = i / 10
#TMP42=#TMP39
#TMP43=10
#TMP44 = #TMP42 / #TMP43
#TMP45 = #TMP44 * #TMP43
#TMP42 = #TMP42 - #TMP45
#TMP41=#TMP42
j=#TMP41
#TMP48=i
#TMP49=10
#TMP50 = #TMP48 / #TMP49
#TMP51 = #TMP50 * #TMP49
#TMP48 = #TMP48 - #TMP51
#TMP47=#TMP48
a=#TMP47
#TMP56=n
#TMP55=j
#TMP54=a
#TMP57 = #TMP56 * 100
#TMP58 = #TMP55 * 10
#TMP59 = #TMP57 + #TMP58
#TMP60 = #TMP59 + #TMP54
#TMP53=#TMP60
#TMP52=#TMP53
#TMP65=n
#TMP64=j
#TMP63=a
#TMP66 = #TMP65 * #TMP65
#TMP67 = #TMP66 * #TMP65
#TMP68 = #TMP64 * #TMP64
#TMP69 = #TMP68 * #TMP64
#TMP70 = #TMP67 + #TMP69
#TMP71 = #TMP63 * #TMP63
#TMP72 = #TMP71 * #TMP63
#TMP73 = #TMP70 + #TMP72
#TMP62=#TMP73
#TMP61=#TMP62
#TMP74 = #TMP52 == #TMP61
BZ #TMP74 _label15
k[y] =i
y = y + 1
_label15: i = i + 1
GOTO _label13
_label14: i=0
_label16: #TMP76 = i < y
BZ #TMP76 _label17
syscall-4   
#TMP77 = k [ i ] 
syscall-1 #TMP77
syscall-11 10
i = i + 1
GOTO _label16
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
h=0
leap=1
m=2
_label18: #TMP78 = m <= 128
BZ #TMP78 _label19
k2 = m / 2
i=2
_label20: #TMP80 = i <= k2
BZ #TMP80 _label21
#TMP81 = m / i
x2 = #TMP81 * i
#TMP85=m
#TMP86=i
#TMP87 = #TMP85 / #TMP86
#TMP88 = #TMP87 * #TMP86
#TMP85 = #TMP85 - #TMP88
#TMP84=#TMP85
#TMP83=#TMP84
BNZ #TMP83 _label22
leap=0
_label22: i = i + 1
GOTO _label20
_label21: #TMP89 = leap == 1
BZ #TMP89 _label23
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP91 = h / 10
x2 = #TMP91 * 10
#TMP93 = x2 == h
BZ #TMP93 _label23
syscall-4  
syscall-11 10
_label23: leap=1
m = m + 1
GOTO _label18
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
int n
void main()
push 5
call factorial
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
#TMP98=5
#TMP99=10
syscall-4 x = 
syscall-1 #TMP98
syscall-11 10
syscall-4 y = 
syscall-1 #TMP99
syscall-11 10
#TMP97=#TMP98
#TMP98=#TMP99
#TMP99=#TMP97
syscall-4 SWAP x = 
syscall-1 #TMP98
syscall-11 10
syscall-4 SWAP y = 
syscall-1 #TMP99
syscall-11 10
#TMP95=#TMP96
call complete_flower_num

====Block0====
int factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
	prev:[]
	next:[1,2,]
	use:[n,]
	def:[#TMP2,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block1====
ret 1
	prev:[0,]
	next:[2,]
	use:[]
	def:[]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block2====
_label2: #TMP3 = n - 1
push #TMP3
call factorial
	prev:[1,0,]
	next:[3,]
	use:[n,]
	def:[#TMP3,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block3====
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
	prev:[2,]
	next:[]
	use:[n,]
	def:[#TMP5,#TMP4,]
	activeIn:[n,]
	activeOut:[]
==============
====Block4====
int mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
	prev:[]
	next:[]
	use:[x,y,]
	def:[#TMP7,#TMP6,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block5====
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 temp
syscall-11 10
ret 
	prev:[]
	next:[]
	use:[x,y,]
	def:[temp,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block6====
int full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP12,#TMP11,#TMP10,#TMP9,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block7====
int flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP20,#TMP19,#TMP18,#TMP17,#TMP16,#TMP15,#TMP14,#TMP13,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block8====
void complete_flower_num()
j=2
	prev:[]
	next:[9,]
	use:[]
	def:[j,]
	activeIn:[k,]
	activeOut:[k,j,]
==============
====Block9====
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
	prev:[8,22,]
	next:[10,23,]
	use:[j,]
	def:[#TMP21,]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block10====
i=1
n=-1
s=j
	prev:[9,]
	next:[11,]
	use:[j,]
	def:[i,n,s,]
	activeIn:[k,j,]
	activeOut:[k,i,j,n,s,]
==============
====Block11====
_label5: #TMP22 = i < j
BZ #TMP22 _label6
	prev:[10,16,]
	next:[12,17,]
	use:[i,j,]
	def:[#TMP22,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block12====
#TMP29 = j / i
#TMP30 = #TMP29 * i
#TMP25 = j - #TMP30
BNZ #TMP25 _label7
	prev:[11,]
	next:[13,16,]
	use:[i,j,]
	def:[#TMP30,#TMP29,#TMP25,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block13====
n = n + 1
s = s - i
#TMP33 = n >= 128
BZ #TMP33 _label8
	prev:[12,]
	next:[14,15,]
	use:[i,n,s,]
	def:[#TMP33,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block14====
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
	prev:[13,]
	next:[15,16,]
	use:[]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block15====
_label8: k[n] =i
	prev:[14,13,]
	next:[16,]
	use:[i,n,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block16====
_label7: i = i + 1
GOTO _label5
	prev:[15,12,14,]
	next:[17,11,]
	use:[i,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block17====
_label6: BNZ s _label10
	prev:[16,11,]
	next:[18,22,]
	use:[s,]
	def:[]
	activeIn:[k,j,n,s,]
	activeOut:[k,j,n,]
==============
====Block18====
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
	prev:[17,]
	next:[19,]
	use:[j,]
	def:[i,]
	activeIn:[k,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block19====
_label11: #TMP34 = i <= n
BZ #TMP34 _label12
	prev:[18,20,]
	next:[20,21,]
	use:[i,n,]
	def:[#TMP34,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block20====
syscall-4   
#TMP35 = k [ i ] 
syscall-1 #TMP35
syscall-11 10
i = i + 1
GOTO _label11
	prev:[19,]
	next:[21,19,]
	use:[k,i,]
	def:[#TMP35,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block21====
_label12: syscall-4  
syscall-11 10
	prev:[20,19,]
	next:[22,]
	use:[]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block22====
_label10: j = j + 1
GOTO _label3
	prev:[21,17,]
	next:[23,9,]
	use:[j,]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block23====
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
i=100
y=0
	prev:[22,9,]
	next:[24,]
	use:[]
	def:[i,y,]
	activeIn:[k,]
	activeOut:[k,i,y,]
==============
====Block24====
_label13: #TMP37 = i < 228
BZ #TMP37 _label14
	prev:[23,27,]
	next:[25,28,]
	use:[i,]
	def:[#TMP37,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block25====
#TMP50 = i / 10
#TMP51 = #TMP50 * 10
#TMP63 = i - #TMP51
#TMP71 = #TMP63 * #TMP63
#TMP72 = #TMP71 * #TMP63
#TMP44 = #TMP50 / 10
#TMP45 = #TMP44 * 10
#TMP64 = #TMP50 - #TMP45
#TMP68 = #TMP64 * #TMP64
#TMP69 = #TMP68 * #TMP64
#TMP65 = i / 100
#TMP66 = #TMP65 * #TMP65
#TMP67 = #TMP66 * #TMP65
#TMP70 = #TMP67 + #TMP69
#TMP73 = #TMP70 + #TMP72
#TMP58 = #TMP64 * 10
#TMP57 = #TMP65 * 100
#TMP59 = #TMP57 + #TMP58
#TMP60 = #TMP59 + #TMP63
#TMP74 = #TMP60 == #TMP73
BZ #TMP74 _label15
	prev:[24,]
	next:[26,27,]
	use:[i,]
	def:[#TMP74,#TMP73,#TMP72,#TMP71,#TMP70,#TMP69,#TMP68,#TMP67,#TMP66,#TMP65,#TMP64,#TMP63,#TMP60,#TMP59,#TMP58,#TMP57,#TMP51,#TMP50,#TMP45,#TMP44,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block26====
k[y] =i
y = y + 1
	prev:[25,]
	next:[27,]
	use:[i,y,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block27====
_label15: i = i + 1
GOTO _label13
	prev:[26,25,]
	next:[28,24,]
	use:[i,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block28====
_label14: i=0
	prev:[27,24,]
	next:[29,]
	use:[]
	def:[i,]
	activeIn:[k,y,]
	activeOut:[k,i,y,]
==============
====Block29====
_label16: #TMP76 = i < y
BZ #TMP76 _label17
	prev:[28,30,]
	next:[30,31,]
	use:[i,y,]
	def:[#TMP76,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block30====
syscall-4   
#TMP77 = k [ i ] 
syscall-1 #TMP77
syscall-11 10
i = i + 1
GOTO _label16
	prev:[29,]
	next:[31,29,]
	use:[k,i,]
	def:[#TMP77,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block31====
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
m=2
h=0
leap=1
	prev:[30,29,]
	next:[32,]
	use:[]
	def:[m,h,leap,]
	activeIn:[]
	activeOut:[m,h,leap,]
==============
====Block32====
_label18: #TMP78 = m <= 128
BZ #TMP78 _label19
	prev:[31,41,]
	next:[33,42,]
	use:[m,]
	def:[#TMP78,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,leap,]
==============
====Block33====
k2 = m / 2
i=2
	prev:[32,]
	next:[34,]
	use:[m,]
	def:[i,k2,]
	activeIn:[m,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block34====
_label20: #TMP80 = i <= k2
BZ #TMP80 _label21
	prev:[33,37,]
	next:[35,38,]
	use:[i,k2,]
	def:[#TMP80,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block35====
#TMP87 = m / i
#TMP88 = #TMP87 * i
#TMP83 = m - #TMP88
BNZ #TMP83 _label22
	prev:[34,]
	next:[36,37,]
	use:[i,m,]
	def:[#TMP88,#TMP87,#TMP83,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block36====
leap=0
	prev:[35,]
	next:[37,]
	use:[]
	def:[leap,]
	activeIn:[i,m,k2,h,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block37====
_label22: i = i + 1
GOTO _label20
	prev:[36,35,]
	next:[38,34,]
	use:[i,]
	def:[]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block38====
_label21: #TMP89 = leap == 1
BZ #TMP89 _label23
	prev:[37,34,]
	next:[39,41,]
	use:[leap,]
	def:[#TMP89,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,]
==============
====Block39====
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP91 = h / 10
x2 = #TMP91 * 10
#TMP93 = x2 == h
BZ #TMP93 _label23
	prev:[38,]
	next:[40,41,]
	use:[m,h,]
	def:[#TMP93,#TMP91,x2,]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block40====
syscall-4  
syscall-11 10
	prev:[39,]
	next:[41,]
	use:[]
	def:[]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block41====
_label23: m = m + 1
leap=1
GOTO _label18
	prev:[40,38,39,]
	next:[42,32,]
	use:[m,]
	def:[leap,]
	activeIn:[m,h,]
	activeOut:[m,h,leap,]
==============
====Block42====
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
	prev:[41,32,]
	next:[]
	use:[h,]
	def:[]
	activeIn:[h,]
	activeOut:[]
==============
====Block43====
void main()
push 5
call factorial
	prev:[]
	next:[44,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block44====
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
syscall-4 x = 
syscall-1 5
syscall-11 10
syscall-4 y = 
syscall-1 10
syscall-11 10
syscall-4 SWAP x = 
syscall-1 10
syscall-11 10
syscall-4 SWAP y = 
syscall-1 5
syscall-11 10
call complete_flower_num
	prev:[43,]
	next:[]
	use:[]
	def:[n,]
	activeIn:[]
	activeOut:[]
==============


const int MAX_NUM
int factorial()
para int n
#TMP2 = n <= 1
BZ #TMP2 _label2
ret 1
_label2: #TMP3 = n - 1
push #TMP3
call factorial
#TMP4=RET
#TMP5 = n * #TMP4
ret #TMP5
int mod()
para int x
para int y
#TMP6 = x / y
#TMP7 = #TMP6 * y
x = x - #TMP7
ret x
int temp
void swap()
para int x
para int y
syscall-4 x = 
syscall-1 x
syscall-11 10
syscall-4 y = 
syscall-1 y
syscall-11 10
temp=x
x=y
syscall-4 SWAP x = 
syscall-1 x
syscall-11 10
syscall-4 SWAP y = 
syscall-1 temp
syscall-11 10
ret 
int full_num()
para int n
para int j
para int a
#TMP9 = n * 100
#TMP10 = j * 10
#TMP11 = #TMP9 + #TMP10
#TMP12 = #TMP11 + a
ret #TMP12
int flower_num()
para int n
para int j
para int a
#TMP13 = n * n
#TMP14 = #TMP13 * n
#TMP15 = j * j
#TMP16 = #TMP15 * j
#TMP17 = #TMP14 + #TMP16
#TMP18 = a * a
#TMP19 = #TMP18 * a
#TMP20 = #TMP17 + #TMP19
ret #TMP20
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()
j=2
_label3: #TMP21 = j < 128
BZ #TMP21 _label4
i=1
n=-1
s=j
_label5: #TMP22 = i < j
BZ #TMP22 _label6
#TMP29 = j / i
#TMP30 = #TMP29 * i
#TMP25 = j - #TMP30
BNZ #TMP25 _label7
n = n + 1
s = s - i
#TMP33 = n >= 128
BZ #TMP33 _label8
syscall-4 OVERFLOW!
syscall-11 10
GOTO _label7
_label8: k[n] =i
_label7: i = i + 1
GOTO _label5
_label6: BNZ s _label10
syscall-4 complete number: 
syscall-1 j
syscall-11 10
i=0
_label11: #TMP34 = i <= n
BZ #TMP34 _label12
syscall-4   
#TMP35 = k [ i ] 
syscall-1 #TMP35
syscall-11 10
i = i + 1
GOTO _label11
_label12: syscall-4  
syscall-11 10
_label10: j = j + 1
GOTO _label3
_label4: syscall-4 ---------------------------------------------------------------
syscall-11 10
syscall-4 'water flower'number is:
syscall-11 10
i=100
y=0
_label13: #TMP37 = i < 228
BZ #TMP37 _label14
#TMP50 = i / 10
#TMP51 = #TMP50 * 10
#TMP63 = i - #TMP51
#TMP71 = #TMP63 * #TMP63
#TMP72 = #TMP71 * #TMP63
#TMP44 = #TMP50 / 10
#TMP45 = #TMP44 * 10
#TMP64 = #TMP50 - #TMP45
#TMP68 = #TMP64 * #TMP64
#TMP69 = #TMP68 * #TMP64
#TMP65 = i / 100
#TMP66 = #TMP65 * #TMP65
#TMP67 = #TMP66 * #TMP65
#TMP70 = #TMP67 + #TMP69
#TMP73 = #TMP70 + #TMP72
#TMP58 = #TMP64 * 10
#TMP57 = #TMP65 * 100
#TMP59 = #TMP57 + #TMP58
#TMP60 = #TMP59 + #TMP63
#TMP74 = #TMP60 == #TMP73
BZ #TMP74 _label15
k[y] =i
y = y + 1
_label15: i = i + 1
GOTO _label13
_label14: i=0
_label16: #TMP76 = i < y
BZ #TMP76 _label17
syscall-4   
#TMP77 = k [ i ] 
syscall-1 #TMP77
syscall-11 10
i = i + 1
GOTO _label16
_label17: syscall-4  
syscall-11 10
syscall-4 ---------------------------------------------------------------
syscall-11 10
m=2
h=0
leap=1
_label18: #TMP78 = m <= 128
BZ #TMP78 _label19
k2 = m / 2
i=2
_label20: #TMP80 = i <= k2
BZ #TMP80 _label21
#TMP87 = m / i
#TMP88 = #TMP87 * i
#TMP83 = m - #TMP88
BNZ #TMP83 _label22
leap=0
_label22: i = i + 1
GOTO _label20
_label21: #TMP89 = leap == 1
BZ #TMP89 _label23
syscall-4  
syscall-1 m
syscall-11 10
h = h + 1
#TMP91 = h / 10
x2 = #TMP91 * 10
#TMP93 = x2 == h
BZ #TMP93 _label23
syscall-4  
syscall-11 10
_label23: m = m + 1
leap=1
GOTO _label18
_label19: syscall-4 The total is 
syscall-1 h
syscall-11 10
ret 
int n
void main()
push 5
call factorial
n=RET
syscall-4 5 != 
syscall-1 n
syscall-11 10
syscall-4 x = 
syscall-1 5
syscall-11 10
syscall-4 y = 
syscall-1 10
syscall-11 10
syscall-4 SWAP x = 
syscall-1 10
syscall-11 10
syscall-4 SWAP y = 
syscall-1 5
syscall-11 10
call complete_flower_num


global:
name:MAX_NUM	id:0	type:const int	scope:	addr:0	dimension:0link:NULL
name:complete_flower_num	id:18	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:factorial	id:1	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[2 ]
name:flower_num	id:14	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[15 16 17 ]
name:full_num	id:10	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[11 12 13 ]
name:main	id:34	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:mod	id:3	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:2	paras:[4 5 ]
name:swap	id:6	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:2	paras:[7 8 ]
complete_flower_num:
name:a	id:31	type:int	scope:complete_flower_num	addr:668	dimension:0link:NULL
name:b	id:32	type:int	scope:complete_flower_num	addr:672	dimension:0link:NULL
name:c	id:33	type:int	scope:complete_flower_num	addr:676	dimension:0link:NULL
name:h	id:28	type:int	scope:complete_flower_num	addr:680	dimension:0link:NULL
name:i	id:20	type:int	scope:complete_flower_num	addr:684	dimension:0link:NULL
name:j	id:21	type:int	scope:complete_flower_num	addr:688	dimension:0link:NULL
name:k	id:19	type:int[]	scope:complete_flower_num	addr:156	dimension:128link:NULL
name:k2	id:27	type:int	scope:complete_flower_num	addr:692	dimension:0link:NULL
name:leap	id:29	type:int	scope:complete_flower_num	addr:696	dimension:0link:NULL
name:m	id:26	type:int	scope:complete_flower_num	addr:700	dimension:0link:NULL
name:n	id:22	type:int	scope:complete_flower_num	addr:704	dimension:0link:NULL
name:s	id:23	type:int	scope:complete_flower_num	addr:708	dimension:0link:NULL
name:x1	id:24	type:int	scope:complete_flower_num	addr:712	dimension:0link:NULL
name:x2	id:30	type:int	scope:complete_flower_num	addr:716	dimension:0link:NULL
name:y	id:25	type:int	scope:complete_flower_num	addr:720	dimension:0link:NULL
tmp93 addr:0
tmp91 addr:4
tmp89 addr:8
tmp88 addr:12
tmp87 addr:16
tmp83 addr:20
tmp80 addr:24
tmp78 addr:28
tmp77 addr:32
tmp76 addr:36
tmp74 addr:40
tmp73 addr:44
tmp72 addr:48
tmp71 addr:52
tmp70 addr:56
tmp69 addr:60
tmp68 addr:64
tmp67 addr:68
tmp66 addr:72
tmp65 addr:76
tmp64 addr:80
tmp63 addr:84
tmp60 addr:88
tmp59 addr:92
tmp58 addr:96
tmp57 addr:100
tmp51 addr:104
tmp50 addr:108
tmp45 addr:112
tmp44 addr:116
tmp37 addr:120
tmp35 addr:124
tmp34 addr:128
tmp33 addr:132
tmp30 addr:136
tmp29 addr:140
tmp25 addr:144
tmp22 addr:148
tmp21 addr:152
factorial:
name:n	id:2	type:int	scope:factorial	addr:52	dimension:0link:NULL
tmp5 addr:0
tmp4 addr:4
tmp3 addr:8
tmp2 addr:12
flower_num:
name:a	id:17	type:int	scope:flower_num	addr:76	dimension:0link:NULL
name:j	id:16	type:int	scope:flower_num	addr:72	dimension:0link:NULL
name:n	id:15	type:int	scope:flower_num	addr:68	dimension:0link:NULL
tmp20 addr:0
tmp19 addr:4
tmp18 addr:8
tmp17 addr:12
tmp16 addr:16
tmp15 addr:20
tmp14 addr:24
tmp13 addr:28
full_num:
name:a	id:13	type:int	scope:full_num	addr:60	dimension:0link:NULL
name:j	id:12	type:int	scope:full_num	addr:56	dimension:0link:NULL
name:n	id:11	type:int	scope:full_num	addr:52	dimension:0link:NULL
tmp12 addr:0
tmp11 addr:4
tmp10 addr:8
tmp9 addr:12
main:
name:n	id:35	type:int	scope:main	addr:0	dimension:0link:NULL
mod:
name:x	id:4	type:int	scope:mod	addr:44	dimension:0link:NULL
name:y	id:5	type:int	scope:mod	addr:48	dimension:0link:NULL
tmp7 addr:0
tmp6 addr:4
swap:
name:temp	id:9	type:int	scope:swap	addr:0	dimension:0link:NULL
name:x	id:7	type:int	scope:swap	addr:40	dimension:0link:NULL
name:y	id:8	type:int	scope:swap	addr:44	dimension:0link:NULL


