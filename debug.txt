int arr[10]
const int ONE
int j
int tmp
void arrange()
para int n
para int i
#TMP2 = n - 1
#TMP3 = i >= #TMP2
BZ #TMP3 _label2
j=0
_label3: #TMP4 = j < n
BZ #TMP4 _label4
#TMP5 = arr [ j ] 
syscall-11 #TMP5
syscall-11 10
j = j + 1
GOTO _label3
_label4: ret 
GOTO _label5
_label2: #TMP6 = i + 1
push n
push #TMP6
call arrange
#TMP7 = i + 1
j=#TMP7
_label6: #TMP8 = j < n
BZ #TMP8 _label7
#TMP9 = arr [ i ] 
#TMP10 = arr [ j ] 
#TMP11 = #TMP9 != #TMP10
BZ #TMP11 _label8
tmp = arr [ i ] 
#TMP13 = arr [ j ] 
arr[i] =#TMP13
arr[j] =tmp
#TMP14 = i + 1
push n
push #TMP14
call arrange
_label8: j = j + 1
GOTO _label6
_label7: #TMP15 = i + 1
j=#TMP15
_label9: #TMP16 = n > j
BZ #TMP16 _label5
#TMP17 = j - 1
tmp = arr [ #TMP17 ] 
#TMP19 = j + -1
#TMP20 = arr [ j ] 
arr[#TMP19] =#TMP20
arr[j] =tmp
j = j + 1
GOTO _label9
_label5: ret 
void main()
arr[0] =97
arr[1] =98
arr[2] =99
arr[3] =100
arr[4] =101
arr[5] =102
push 5
push 0
call arrange

====Block0====
void arrange()
para int n
para int i
#TMP2 = n - 1
#TMP3 = i >= #TMP2
BZ #TMP3 _label2
	prev:[]
	next:[1,6,]
	use:[n,i,]
	def:[#TMP3,#TMP2,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block1====
j=0
	prev:[0,]
	next:[2,]
	use:[]
	def:[j,]
	activeIn:[arr,n,]
	activeOut:[arr,n,j,]
==============
====Block2====
_label3: #TMP4 = j < n
BZ #TMP4 _label4
	prev:[1,3,]
	next:[3,4,]
	use:[n,j,]
	def:[#TMP4,]
	activeIn:[arr,n,j,]
	activeOut:[arr,n,j,]
==============
====Block3====
#TMP5 = arr [ j ] 
syscall-11 #TMP5
syscall-11 10
j = j + 1
GOTO _label3
	prev:[2,]
	next:[4,2,]
	use:[arr,j,]
	def:[#TMP5,]
	activeIn:[arr,n,j,]
	activeOut:[arr,n,j,]
==============
====Block4====
_label4: ret 
	prev:[3,2,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block5====
GOTO _label5
	prev:[]
	next:[6,15,]
	use:[]
	def:[]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block6====
_label2: #TMP6 = i + 1
push n
push #TMP6
call arrange
	prev:[5,0,]
	next:[7,]
	use:[n,i,]
	def:[#TMP6,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,]
==============
====Block7====
#TMP7 = i + 1
j=#TMP7
	prev:[6,]
	next:[8,]
	use:[i,]
	def:[#TMP7,j,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,i,j,]
==============
====Block8====
_label6: #TMP8 = j < n
BZ #TMP8 _label7
	prev:[7,11,]
	next:[9,12,]
	use:[n,j,]
	def:[#TMP8,]
	activeIn:[arr,n,i,j,]
	activeOut:[arr,n,i,j,]
==============
====Block9====
#TMP9 = arr [ i ] 
#TMP10 = arr [ j ] 
#TMP11 = #TMP9 != #TMP10
BZ #TMP11 _label8
	prev:[8,]
	next:[10,11,]
	use:[arr,i,j,]
	def:[#TMP11,#TMP10,#TMP9,]
	activeIn:[arr,n,i,j,]
	activeOut:[arr,n,i,j,]
==============
====Block10====
tmp = arr [ i ] 
#TMP13 = arr [ j ] 
arr[i] =#TMP13
arr[j] =tmp
#TMP14 = i + 1
push n
push #TMP14
call arrange
	prev:[9,]
	next:[11,]
	use:[arr,n,i,j,]
	def:[#TMP14,#TMP13,tmp,]
	activeIn:[arr,n,i,j,]
	activeOut:[arr,n,i,j,]
==============
====Block11====
_label8: j = j + 1
GOTO _label6
	prev:[10,9,]
	next:[12,8,]
	use:[j,]
	def:[]
	activeIn:[arr,n,i,j,]
	activeOut:[arr,n,i,j,]
==============
====Block12====
_label7: #TMP15 = i + 1
j=#TMP15
	prev:[11,8,]
	next:[13,]
	use:[i,]
	def:[#TMP15,j,]
	activeIn:[arr,n,i,]
	activeOut:[arr,n,j,]
==============
====Block13====
_label9: #TMP16 = n > j
BZ #TMP16 _label5
	prev:[12,14,]
	next:[14,15,]
	use:[n,j,]
	def:[#TMP16,]
	activeIn:[arr,n,j,]
	activeOut:[arr,n,j,]
==============
====Block14====
#TMP17 = j - 1
tmp = arr [ #TMP17 ] 
#TMP19 = j + -1
#TMP20 = arr [ j ] 
arr[#TMP19] =#TMP20
arr[j] =tmp
j = j + 1
GOTO _label9
	prev:[13,]
	next:[15,13,]
	use:[arr,j,]
	def:[#TMP20,#TMP19,#TMP17,tmp,]
	activeIn:[arr,n,j,]
	activeOut:[arr,n,j,]
==============
====Block15====
_label5: ret 
	prev:[14,5,13,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block16====
void main()
arr[0] =97
arr[1] =98
arr[2] =99
arr[3] =100
arr[4] =101
arr[5] =102
push 5
push 0
call arrange
	prev:[]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============


int arr[10]
const int ONE
int j
int tmp
void arrange()
para int n
para int i
#TMP2 = n - 1
#TMP3 = i >= #TMP2
BZ #TMP3 _label2
j=0
_label3: #TMP4 = j < n
BZ #TMP4 _label4
#TMP5 = arr [ j ] 
syscall-11 #TMP5
syscall-11 10
j = j + 1
GOTO _label3
_label4: ret 
GOTO _label5
_label2: #TMP6 = i + 1
push n
push #TMP6
call arrange
#TMP7 = i + 1
j=#TMP7
_label6: #TMP8 = j < n
BZ #TMP8 _label7
#TMP9 = arr [ i ] 
#TMP10 = arr [ j ] 
#TMP11 = #TMP9 != #TMP10
BZ #TMP11 _label8
tmp = arr [ i ] 
#TMP13 = arr [ j ] 
arr[i] =#TMP13
arr[j] =tmp
#TMP14 = i + 1
push n
push #TMP14
call arrange
_label8: j = j + 1
GOTO _label6
_label7: #TMP15 = i + 1
j=#TMP15
_label9: #TMP16 = n > j
BZ #TMP16 _label5
#TMP17 = j - 1
tmp = arr [ #TMP17 ] 
#TMP19 = j + -1
#TMP20 = arr [ j ] 
arr[#TMP19] =#TMP20
arr[j] =tmp
j = j + 1
GOTO _label9
_label5: ret 
void main()
arr[0] =97
arr[1] =98
arr[2] =99
arr[3] =100
arr[4] =101
arr[5] =102
push 5
push 0
call arrange


global:
name:arr	id:0	type:char[]	scope:	addr:0	dimension:10link:NULL
name:arrange	id:1	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:2	paras:[2 3 ]
name:main	id:7	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
arrange:
name:ONE	id:4	type:const int	scope:arrange	addr:76	dimension:0link:NULL
name:i	id:3	type:int	scope:arrange	addr:120	dimension:0link:NULL
name:j	id:5	type:int	scope:arrange	addr:68	dimension:0link:NULL
name:n	id:2	type:int	scope:arrange	addr:116	dimension:0link:NULL
name:tmp	id:6	type:char	scope:arrange	addr:72	dimension:0link:NULL
tmp20 addr:0
tmp19 addr:4
tmp17 addr:8
tmp16 addr:12
tmp15 addr:16
tmp14 addr:20
tmp13 addr:24
tmp11 addr:28
tmp10 addr:32
tmp9 addr:36
tmp8 addr:40
tmp7 addr:44
tmp6 addr:48
tmp5 addr:52
tmp4 addr:56
tmp3 addr:60
tmp2 addr:64
main:


