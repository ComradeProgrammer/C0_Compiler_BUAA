const int MAX_NUM
int factorial()   active[]
para int n   active[]
#TMP2 = n <= 1   active[]
BZ #TMP2 _label2   active[]
ret 1   active[]
_label2: #TMP3 = n - 1   active[]
push #TMP3   active[]
call factorial   active[]
#TMP4=RET   active[]
#TMP5 = n * #TMP4   active[]
ret #TMP5   active[]
int mod()   active[]
para int x   active[]
para int y   active[]
#TMP6 = x / y   active[]
#TMP7 = #TMP6 * y   active[]
x = x - #TMP7   active[]
ret x   active[]
int temp
void swap()   active[]
para int x   active[]
para int y   active[]
syscall-4 x =    active[]
syscall-1 x   active[]
syscall-11 10   active[]
syscall-4 y =    active[]
syscall-1 y   active[]
syscall-11 10   active[]
temp=x   active[]
x=y   active[]
y=temp   active[]
syscall-4 SWAP x =    active[]
syscall-1 x   active[]
syscall-11 10   active[]
syscall-4 SWAP y =    active[]
syscall-1 y   active[]
syscall-11 10   active[]
ret    active[]
int full_num()   active[]
para int n   active[]
para int j   active[]
para int a   active[]
#TMP9 = n * 100   active[]
#TMP10 = j * 10   active[]
#TMP11 = #TMP9 + #TMP10   active[]
#TMP12 = #TMP11 + a   active[]
ret #TMP12   active[]
int flower_num()   active[]
para int n   active[]
para int j   active[]
para int a   active[]
#TMP13 = n * n   active[]
#TMP14 = #TMP13 * n   active[]
#TMP15 = j * j   active[]
#TMP16 = #TMP15 * j   active[]
#TMP17 = #TMP14 + #TMP16   active[]
#TMP18 = a * a   active[]
#TMP19 = #TMP18 * a   active[]
#TMP20 = #TMP17 + #TMP19   active[]
ret #TMP20   active[]
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()   active[]
j=2   active[]
_label3: #TMP21 = j < 128   active[]
BZ #TMP21 _label4   active[]
n=-1   active[]
s=j   active[]
i=1   active[]
_label5: #TMP22 = i < j   active[]
BZ #TMP22 _label6   active[]
#TMP23 = j / i   active[]
x1 = #TMP23 * i   active[]
#TMP27=j   active[]
#TMP28=i   active[]
#TMP29 = #TMP27 / #TMP28   active[]
#TMP30 = #TMP29 * #TMP28   active[]
#TMP27 = #TMP27 - #TMP30   active[]
#TMP26=#TMP27   active[]
#TMP25=#TMP26   active[]
#TMP31 = #TMP25 == 0   active[]
BZ #TMP31 _label7   active[]
n = n + 1   active[]
s = s - i   active[]
#TMP34 = n >= 128   active[]
BZ #TMP34 _label8   active[]
syscall-4 OVERFLOW!   active[]
syscall-11 10   active[]
GOTO _label7   active[]
_label8: k[n] =i   active[]
_label7: i = i + 1   active[]
GOTO _label5   active[]
_label6: #TMP35 = s == 0   active[]
BZ #TMP35 _label10   active[]
syscall-4 complete number:    active[]
syscall-1 j   active[]
syscall-11 10   active[]
i=0   active[]
_label11: #TMP36 = i <= n   active[]
BZ #TMP36 _label12   active[]
syscall-4      active[]
#TMP37 = k [ i ]    active[]
syscall-1 #TMP37   active[]
syscall-11 10   active[]
i = i + 1   active[]
GOTO _label11   active[]
_label12: syscall-4     active[]
syscall-11 10   active[]
_label10: j = j + 1   active[]
GOTO _label3   active[]
_label4: syscall-4 ---------------------------------------------------------------   active[]
syscall-11 10   active[]
syscall-4 'water flower'number is:   active[]
syscall-11 10   active[]
y=0   active[]
i=100   active[]
_label13: #TMP38 = 100 + 128   active[]
#TMP39 = i < #TMP38   active[]
BZ #TMP39 _label14   active[]
n = i / 100   active[]
#TMP41 = i / 10   active[]
#TMP44=#TMP41   active[]
#TMP45=10   active[]
#TMP46 = #TMP44 / #TMP45   active[]
#TMP47 = #TMP46 * #TMP45   active[]
#TMP44 = #TMP44 - #TMP47   active[]
#TMP43=#TMP44   active[]
j=#TMP43   active[]
#TMP50=i   active[]
#TMP51=10   active[]
#TMP52 = #TMP50 / #TMP51   active[]
#TMP53 = #TMP52 * #TMP51   active[]
#TMP50 = #TMP50 - #TMP53   active[]
#TMP49=#TMP50   active[]
a=#TMP49   active[]
#TMP58=n   active[]
#TMP57=j   active[]
#TMP56=a   active[]
#TMP59 = #TMP58 * 100   active[]
#TMP60 = #TMP57 * 10   active[]
#TMP61 = #TMP59 + #TMP60   active[]
#TMP62 = #TMP61 + #TMP56   active[]
#TMP55=#TMP62   active[]
#TMP54=#TMP55   active[]
#TMP67=n   active[]
#TMP66=j   active[]
#TMP65=a   active[]
#TMP68 = #TMP67 * #TMP67   active[]
#TMP69 = #TMP68 * #TMP67   active[]
#TMP70 = #TMP66 * #TMP66   active[]
#TMP71 = #TMP70 * #TMP66   active[]
#TMP72 = #TMP69 + #TMP71   active[]
#TMP73 = #TMP65 * #TMP65   active[]
#TMP74 = #TMP73 * #TMP65   active[]
#TMP75 = #TMP72 + #TMP74   active[]
#TMP64=#TMP75   active[]
#TMP63=#TMP64   active[]
#TMP76 = #TMP54 == #TMP63   active[]
BZ #TMP76 _label15   active[]
k[y] =i   active[]
y = y + 1   active[]
_label15: i = i + 1   active[]
GOTO _label13   active[]
_label14: i=0   active[]
_label16: #TMP78 = i < y   active[]
BZ #TMP78 _label17   active[]
syscall-4      active[]
#TMP79 = k [ i ]    active[]
syscall-1 #TMP79   active[]
syscall-11 10   active[]
i = i + 1   active[]
GOTO _label16   active[]
_label17: syscall-4     active[]
syscall-11 10   active[]
syscall-4 ---------------------------------------------------------------   active[]
syscall-11 10   active[]
h=0   active[]
leap=1   active[]
m=2   active[]
_label18: #TMP80 = m <= 128   active[]
BZ #TMP80 _label19   active[]
k2 = m / 2   active[]
i=2   active[]
_label20: #TMP82 = i <= k2   active[]
BZ #TMP82 _label21   active[]
#TMP83 = m / i   active[]
x2 = #TMP83 * i   active[]
#TMP87=m   active[]
#TMP88=i   active[]
#TMP89 = #TMP87 / #TMP88   active[]
#TMP90 = #TMP89 * #TMP88   active[]
#TMP87 = #TMP87 - #TMP90   active[]
#TMP86=#TMP87   active[]
#TMP85=#TMP86   active[]
#TMP91 = #TMP85 == 0   active[]
BZ #TMP91 _label22   active[]
leap=0   active[]
_label22: i = i + 1   active[]
GOTO _label20   active[]
_label21: #TMP92 = leap == 1   active[]
BZ #TMP92 _label23   active[]
syscall-4     active[]
syscall-1 m   active[]
syscall-11 10   active[]
h = h + 1   active[]
#TMP94 = h / 10   active[]
x2 = #TMP94 * 10   active[]
#TMP96 = x2 == h   active[]
BZ #TMP96 _label23   active[]
syscall-4     active[]
syscall-11 10   active[]
_label23: leap=1   active[]
m = m + 1   active[]
GOTO _label18   active[]
_label19: syscall-4 The total is    active[]
syscall-1 h   active[]
syscall-11 10   active[]
ret    active[]
int n
void main()   active[]
push 5   active[]
call factorial   active[]
n=RET   active[]
syscall-4 5 !=    active[]
syscall-1 n   active[]
syscall-11 10   active[]
push 5   active[]
push 10   active[]
call swap   active[]
call complete_flower_num   active[]

====Block0====
int factorial()   active[2 ]
para int n   active[2 ]
#TMP2 = n <= 1   active[-2 2 ]
BZ #TMP2 _label2   active[2 ]
	prev:[]
	next:[1,2,]
	use:[n,]
	def:[#TMP2,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block1====
ret 1   active[2 ]
	prev:[0,]
	next:[2,]
	use:[]
	def:[]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block2====
_label2: #TMP3 = n - 1   active[-3 2 ]
push #TMP3   active[2 ]
call factorial   active[2 ]
	prev:[1,0,]
	next:[3,]
	use:[n,]
	def:[#TMP3,]
	activeIn:[n,]
	activeOut:[n,]
==============
====Block3====
#TMP4=RET   active[-4 2 ]
#TMP5 = n * #TMP4   active[-5 ]
ret #TMP5   active[]
	prev:[2,]
	next:[]
	use:[n,]
	def:[#TMP5,#TMP4,]
	activeIn:[n,]
	activeOut:[]
==============
====Block4====
int mod()   active[4 5 ]
para int x   active[4 5 ]
para int y   active[4 5 ]
#TMP6 = x / y   active[-6 4 5 ]
#TMP7 = #TMP6 * y   active[-7 4 ]
x = x - #TMP7   active[4 ]
ret x   active[]
	prev:[]
	next:[]
	use:[x,y,]
	def:[#TMP7,#TMP6,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block5====
void swap()   active[7 8 ]
para int x   active[7 8 ]
para int y   active[7 8 ]
syscall-4 x =    active[7 8 ]
syscall-1 x   active[7 8 ]
syscall-11 10   active[7 8 ]
syscall-4 y =    active[7 8 ]
syscall-1 y   active[7 8 ]
syscall-11 10   active[7 8 ]
temp=x   active[8 9 ]
x=y   active[7 9 ]
syscall-4 SWAP x =    active[7 9 ]
syscall-1 x   active[9 ]
syscall-11 10   active[9 ]
syscall-4 SWAP y =    active[9 ]
syscall-1 temp   active[]
syscall-11 10   active[]
ret    active[]
	prev:[]
	next:[]
	use:[x,y,]
	def:[temp,]
	activeIn:[x,y,]
	activeOut:[]
==============
====Block6====
int full_num()   active[11 12 13 ]
para int n   active[11 12 13 ]
para int j   active[11 12 13 ]
para int a   active[11 12 13 ]
#TMP9 = n * 100   active[-9 12 13 ]
#TMP10 = j * 10   active[-10 -9 13 ]
#TMP11 = #TMP9 + #TMP10   active[-11 13 ]
#TMP12 = #TMP11 + a   active[-12 ]
ret #TMP12   active[]
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP12,#TMP11,#TMP10,#TMP9,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block7====
int flower_num()   active[15 16 17 ]
para int n   active[15 16 17 ]
para int j   active[15 16 17 ]
para int a   active[15 16 17 ]
#TMP13 = n * n   active[-13 15 16 17 ]
#TMP14 = #TMP13 * n   active[-14 16 17 ]
#TMP15 = j * j   active[-15 -14 16 17 ]
#TMP16 = #TMP15 * j   active[-16 -14 17 ]
#TMP17 = #TMP14 + #TMP16   active[-17 17 ]
#TMP18 = a * a   active[-18 -17 17 ]
#TMP19 = #TMP18 * a   active[-19 -17 ]
#TMP20 = #TMP17 + #TMP19   active[-20 ]
ret #TMP20   active[]
	prev:[]
	next:[]
	use:[n,j,a,]
	def:[#TMP20,#TMP19,#TMP18,#TMP17,#TMP16,#TMP15,#TMP14,#TMP13,]
	activeIn:[n,j,a,]
	activeOut:[]
==============
====Block8====
void complete_flower_num()   active[19 ]
j=2   active[19 21 ]
	prev:[]
	next:[9,]
	use:[]
	def:[j,]
	activeIn:[k,]
	activeOut:[k,j,]
==============
====Block9====
_label3: #TMP21 = j < 128   active[-21 19 21 ]
BZ #TMP21 _label4   active[19 21 ]
	prev:[8,22,]
	next:[10,23,]
	use:[j,]
	def:[#TMP21,]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block10====
i=1   active[19 20 21 ]
n=-1   active[19 20 21 22 ]
s=j   active[19 20 21 22 23 ]
	prev:[9,]
	next:[11,]
	use:[j,]
	def:[i,n,s,]
	activeIn:[k,j,]
	activeOut:[k,i,j,n,s,]
==============
====Block11====
_label5: #TMP22 = i < j   active[-22 19 20 21 22 23 ]
BZ #TMP22 _label6   active[19 20 21 22 23 ]
	prev:[10,16,]
	next:[12,17,]
	use:[i,j,]
	def:[#TMP22,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block12====
#TMP23 = j / i   active[19 20 21 22 23 ]
#TMP29 = j / i   active[-29 19 20 21 22 23 ]
#TMP30 = #TMP29 * i   active[-30 19 20 21 22 23 ]
#TMP27 = j - #TMP30   active[-27 19 20 21 22 23 ]
#TMP31 = #TMP27 == 0   active[-31 19 20 21 22 23 ]
BZ #TMP31 _label7   active[19 20 21 22 23 ]
	prev:[11,]
	next:[13,16,]
	use:[i,j,]
	def:[#TMP31,#TMP30,#TMP29,#TMP27,#TMP23,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block13====
n = n + 1   active[19 20 21 22 23 ]
s = s - i   active[19 20 21 22 23 ]
#TMP34 = n >= 128   active[-34 19 20 21 22 23 ]
BZ #TMP34 _label8   active[19 20 21 22 23 ]
	prev:[12,]
	next:[14,15,]
	use:[i,n,s,]
	def:[#TMP34,]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block14====
syscall-4 OVERFLOW!   active[19 20 21 22 23 ]
syscall-11 10   active[19 20 21 22 23 ]
GOTO _label7   active[19 20 21 22 23 ]
	prev:[13,]
	next:[15,16,]
	use:[]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block15====
_label8: k[n] =i   active[19 20 21 22 23 ]
	prev:[14,13,]
	next:[16,]
	use:[i,n,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block16====
_label7: i = i + 1   active[19 20 21 22 23 ]
GOTO _label5   active[19 20 21 22 23 ]
	prev:[15,12,14,]
	next:[17,11,]
	use:[i,]
	def:[]
	activeIn:[k,i,j,n,s,]
	activeOut:[k,i,j,n,s,]
==============
====Block17====
_label6: #TMP35 = s == 0   active[-35 19 21 22 ]
BZ #TMP35 _label10   active[19 21 22 ]
	prev:[16,11,]
	next:[18,22,]
	use:[s,]
	def:[#TMP35,]
	activeIn:[k,j,n,s,]
	activeOut:[k,j,n,]
==============
====Block18====
syscall-4 complete number:    active[19 21 22 ]
syscall-1 j   active[19 21 22 ]
syscall-11 10   active[19 21 22 ]
i=0   active[19 20 21 22 ]
	prev:[17,]
	next:[19,]
	use:[j,]
	def:[i,]
	activeIn:[k,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block19====
_label11: #TMP36 = i <= n   active[-36 19 20 21 22 ]
BZ #TMP36 _label12   active[19 20 21 22 ]
	prev:[18,20,]
	next:[20,21,]
	use:[i,n,]
	def:[#TMP36,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block20====
syscall-4      active[19 20 21 22 ]
#TMP37 = k [ i ]    active[-37 19 20 21 22 ]
syscall-1 #TMP37   active[19 20 21 22 ]
syscall-11 10   active[19 20 21 22 ]
i = i + 1   active[19 20 21 22 ]
GOTO _label11   active[19 20 21 22 ]
	prev:[19,]
	next:[21,19,]
	use:[k,i,]
	def:[#TMP37,]
	activeIn:[k,i,j,n,]
	activeOut:[k,i,j,n,]
==============
====Block21====
_label12: syscall-4     active[19 21 ]
syscall-11 10   active[19 21 ]
	prev:[20,19,]
	next:[22,]
	use:[]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block22====
_label10: j = j + 1   active[19 21 ]
GOTO _label3   active[19 21 ]
	prev:[21,17,]
	next:[23,9,]
	use:[j,]
	def:[]
	activeIn:[k,j,]
	activeOut:[k,j,]
==============
====Block23====
_label4: syscall-4 ---------------------------------------------------------------   active[19 ]
syscall-11 10   active[19 ]
syscall-4 'water flower'number is:   active[19 ]
syscall-11 10   active[19 ]
i=100   active[19 20 ]
y=0   active[19 20 25 ]
	prev:[22,9,]
	next:[24,]
	use:[]
	def:[i,y,]
	activeIn:[k,]
	activeOut:[k,i,y,]
==============
====Block24====
_label13: #TMP38 = 100 + 128   active[-38 19 20 25 ]
#TMP39 = i < #TMP38   active[-39 19 20 25 ]
BZ #TMP39 _label14   active[19 20 25 ]
	prev:[23,27,]
	next:[25,28,]
	use:[i,]
	def:[#TMP39,#TMP38,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block25====
n = i / 100   active[19 20 22 25 ]
#TMP41 = i / 10   active[-41 19 20 22 25 ]
#TMP46 = #TMP41 / 10   active[-46 -41 19 20 22 25 ]
#TMP47 = #TMP46 * 10   active[-47 -41 19 20 22 25 ]
#TMP44 = #TMP41 - #TMP47   active[-44 19 20 22 25 ]
#TMP52 = i / 10   active[-52 -44 19 20 22 25 ]
#TMP53 = #TMP52 * 10   active[-53 -44 19 20 22 25 ]
#TMP50 = i - #TMP53   active[-50 -44 19 20 22 25 ]
#TMP59 = n * 100   active[-59 -50 -44 19 20 22 25 ]
#TMP60 = #TMP44 * 10   active[-60 -59 -50 -44 19 20 22 25 ]
#TMP61 = #TMP59 + #TMP60   active[-61 -50 -44 19 20 22 25 ]
#TMP62 = #TMP61 + #TMP50   active[-62 -50 -44 19 20 22 25 ]
#TMP68 = n * n   active[-68 -62 -50 -44 19 20 22 25 ]
#TMP69 = #TMP68 * n   active[-69 -62 -50 -44 19 20 25 ]
#TMP70 = #TMP44 * #TMP44   active[-70 -69 -62 -50 -44 19 20 25 ]
#TMP71 = #TMP70 * #TMP44   active[-71 -69 -62 -50 19 20 25 ]
#TMP72 = #TMP69 + #TMP71   active[-72 -62 -50 19 20 25 ]
#TMP73 = #TMP50 * #TMP50   active[-73 -72 -62 -50 19 20 25 ]
#TMP74 = #TMP73 * #TMP50   active[-74 -72 -62 19 20 25 ]
#TMP75 = #TMP72 + #TMP74   active[-75 -62 19 20 25 ]
#TMP76 = #TMP62 == #TMP75   active[-76 19 20 25 ]
BZ #TMP76 _label15   active[19 20 25 ]
	prev:[24,]
	next:[26,27,]
	use:[i,]
	def:[#TMP76,#TMP75,#TMP74,#TMP73,#TMP72,#TMP71,#TMP70,#TMP69,#TMP68,#TMP62,#TMP61,#TMP60,#TMP59,#TMP53,#TMP52,#TMP50,#TMP47,#TMP46,#TMP44,#TMP41,n,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block26====
k[y] =i   active[19 20 25 ]
y = y + 1   active[19 20 25 ]
	prev:[25,]
	next:[27,]
	use:[i,y,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block27====
_label15: i = i + 1   active[19 20 25 ]
GOTO _label13   active[19 20 25 ]
	prev:[26,25,]
	next:[28,24,]
	use:[i,]
	def:[]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block28====
_label14: i=0   active[19 20 25 ]
	prev:[27,24,]
	next:[29,]
	use:[]
	def:[i,]
	activeIn:[k,y,]
	activeOut:[k,i,y,]
==============
====Block29====
_label16: #TMP78 = i < y   active[-78 19 20 25 ]
BZ #TMP78 _label17   active[19 20 25 ]
	prev:[28,30,]
	next:[30,31,]
	use:[i,y,]
	def:[#TMP78,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block30====
syscall-4      active[19 20 25 ]
#TMP79 = k [ i ]    active[-79 19 20 25 ]
syscall-1 #TMP79   active[19 20 25 ]
syscall-11 10   active[19 20 25 ]
i = i + 1   active[19 20 25 ]
GOTO _label16   active[19 20 25 ]
	prev:[29,]
	next:[31,29,]
	use:[k,i,]
	def:[#TMP79,]
	activeIn:[k,i,y,]
	activeOut:[k,i,y,]
==============
====Block31====
_label17: syscall-4     active[]
syscall-11 10   active[]
syscall-4 ---------------------------------------------------------------   active[]
syscall-11 10   active[]
m=2   active[26 ]
h=0   active[26 28 ]
leap=1   active[26 28 29 ]
	prev:[30,29,]
	next:[32,]
	use:[]
	def:[m,h,leap,]
	activeIn:[]
	activeOut:[m,h,leap,]
==============
====Block32====
_label18: #TMP80 = m <= 128   active[-80 26 28 29 ]
BZ #TMP80 _label19   active[26 28 29 ]
	prev:[31,41,]
	next:[33,42,]
	use:[m,]
	def:[#TMP80,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,leap,]
==============
====Block33====
k2 = m / 2   active[26 27 28 29 ]
i=2   active[20 26 27 28 29 ]
	prev:[32,]
	next:[34,]
	use:[m,]
	def:[i,k2,]
	activeIn:[m,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block34====
_label20: #TMP82 = i <= k2   active[-82 20 26 27 28 29 ]
BZ #TMP82 _label21   active[20 26 27 28 29 ]
	prev:[33,37,]
	next:[35,38,]
	use:[i,k2,]
	def:[#TMP82,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block35====
#TMP83 = m / i   active[20 26 27 28 29 ]
#TMP89 = m / i   active[-89 20 26 27 28 29 ]
#TMP90 = #TMP89 * i   active[-90 20 26 27 28 29 ]
#TMP87 = m - #TMP90   active[-87 20 26 27 28 29 ]
#TMP91 = #TMP87 == 0   active[-91 20 26 27 28 29 ]
BZ #TMP91 _label22   active[20 26 27 28 29 ]
	prev:[34,]
	next:[36,37,]
	use:[i,m,]
	def:[#TMP91,#TMP90,#TMP89,#TMP87,#TMP83,]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block36====
leap=0   active[20 26 27 28 29 ]
	prev:[35,]
	next:[37,]
	use:[]
	def:[leap,]
	activeIn:[i,m,k2,h,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block37====
_label22: i = i + 1   active[20 26 27 28 29 ]
GOTO _label20   active[20 26 27 28 29 ]
	prev:[36,35,]
	next:[38,34,]
	use:[i,]
	def:[]
	activeIn:[i,m,k2,h,leap,]
	activeOut:[i,m,k2,h,leap,]
==============
====Block38====
_label21: #TMP92 = leap == 1   active[-92 26 28 ]
BZ #TMP92 _label23   active[26 28 ]
	prev:[37,34,]
	next:[39,41,]
	use:[leap,]
	def:[#TMP92,]
	activeIn:[m,h,leap,]
	activeOut:[m,h,]
==============
====Block39====
syscall-4     active[26 28 ]
syscall-1 m   active[26 28 ]
syscall-11 10   active[26 28 ]
h = h + 1   active[26 28 ]
#TMP94 = h / 10   active[-94 26 28 ]
x2 = #TMP94 * 10   active[26 28 30 ]
#TMP96 = x2 == h   active[-96 26 28 ]
BZ #TMP96 _label23   active[26 28 ]
	prev:[38,]
	next:[40,41,]
	use:[m,h,]
	def:[#TMP96,#TMP94,x2,]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block40====
syscall-4     active[26 28 ]
syscall-11 10   active[26 28 ]
	prev:[39,]
	next:[41,]
	use:[]
	def:[]
	activeIn:[m,h,]
	activeOut:[m,h,]
==============
====Block41====
_label23: m = m + 1   active[26 28 ]
leap=1   active[26 28 29 ]
GOTO _label18   active[26 28 29 ]
	prev:[40,38,39,]
	next:[42,32,]
	use:[m,]
	def:[leap,]
	activeIn:[m,h,]
	activeOut:[m,h,leap,]
==============
====Block42====
_label19: syscall-4 The total is    active[28 ]
syscall-1 h   active[]
syscall-11 10   active[]
ret    active[]
	prev:[41,32,]
	next:[]
	use:[h,]
	def:[]
	activeIn:[h,]
	activeOut:[]
==============
====Block43====
void main()   active[]
push 5   active[]
call factorial   active[]
	prev:[]
	next:[44,]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============
====Block44====
n=RET   active[35 ]
syscall-4 5 !=    active[35 ]
syscall-1 n   active[]
syscall-11 10   active[]
push 5   active[]
push 10   active[]
call swap   active[]
	prev:[43,]
	next:[45,]
	use:[]
	def:[n,]
	activeIn:[]
	activeOut:[]
==============
====Block45====
call complete_flower_num   active[]
	prev:[44,]
	next:[]
	use:[]
	def:[]
	activeIn:[]
	activeOut:[]
==============


const int MAX_NUM
int factorial()   active[2 ]
para int n   active[2 ]
#TMP2 = n <= 1   active[-2 2 ]
BZ #TMP2 _label2   active[2 ]
ret 1   active[2 ]
_label2: #TMP3 = n - 1   active[-3 2 ]
push #TMP3   active[2 ]
call factorial   active[2 ]
#TMP4=RET   active[-4 2 ]
#TMP5 = n * #TMP4   active[-5 ]
ret #TMP5   active[]
int mod()   active[4 5 ]
para int x   active[4 5 ]
para int y   active[4 5 ]
#TMP6 = x / y   active[-6 4 5 ]
#TMP7 = #TMP6 * y   active[-7 4 ]
x = x - #TMP7   active[4 ]
ret x   active[]
int temp
void swap()   active[7 8 ]
para int x   active[7 8 ]
para int y   active[7 8 ]
syscall-4 x =    active[7 8 ]
syscall-1 x   active[7 8 ]
syscall-11 10   active[7 8 ]
syscall-4 y =    active[7 8 ]
syscall-1 y   active[7 8 ]
syscall-11 10   active[7 8 ]
temp=x   active[8 9 ]
x=y   active[7 9 ]
syscall-4 SWAP x =    active[7 9 ]
syscall-1 x   active[9 ]
syscall-11 10   active[9 ]
syscall-4 SWAP y =    active[9 ]
syscall-1 temp   active[]
syscall-11 10   active[]
ret    active[]
int full_num()   active[11 12 13 ]
para int n   active[11 12 13 ]
para int j   active[11 12 13 ]
para int a   active[11 12 13 ]
#TMP9 = n * 100   active[-9 12 13 ]
#TMP10 = j * 10   active[-10 -9 13 ]
#TMP11 = #TMP9 + #TMP10   active[-11 13 ]
#TMP12 = #TMP11 + a   active[-12 ]
ret #TMP12   active[]
int flower_num()   active[15 16 17 ]
para int n   active[15 16 17 ]
para int j   active[15 16 17 ]
para int a   active[15 16 17 ]
#TMP13 = n * n   active[-13 15 16 17 ]
#TMP14 = #TMP13 * n   active[-14 16 17 ]
#TMP15 = j * j   active[-15 -14 16 17 ]
#TMP16 = #TMP15 * j   active[-16 -14 17 ]
#TMP17 = #TMP14 + #TMP16   active[-17 17 ]
#TMP18 = a * a   active[-18 -17 17 ]
#TMP19 = #TMP18 * a   active[-19 -17 ]
#TMP20 = #TMP17 + #TMP19   active[-20 ]
ret #TMP20   active[]
int a
int b
int c
int h
int i
int j
int k[128]
int k2
int leap
int m
int n
int s
int x1
int x2
int y
void complete_flower_num()   active[19 ]
j=2   active[19 21 ]
_label3: #TMP21 = j < 128   active[-21 19 21 ]
BZ #TMP21 _label4   active[19 21 ]
i=1   active[19 20 21 ]
n=-1   active[19 20 21 22 ]
s=j   active[19 20 21 22 23 ]
_label5: #TMP22 = i < j   active[-22 19 20 21 22 23 ]
BZ #TMP22 _label6   active[19 20 21 22 23 ]
#TMP23 = j / i   active[19 20 21 22 23 ]
#TMP29 = j / i   active[-29 19 20 21 22 23 ]
#TMP30 = #TMP29 * i   active[-30 19 20 21 22 23 ]
#TMP27 = j - #TMP30   active[-27 19 20 21 22 23 ]
#TMP31 = #TMP27 == 0   active[-31 19 20 21 22 23 ]
BZ #TMP31 _label7   active[19 20 21 22 23 ]
n = n + 1   active[19 20 21 22 23 ]
s = s - i   active[19 20 21 22 23 ]
#TMP34 = n >= 128   active[-34 19 20 21 22 23 ]
BZ #TMP34 _label8   active[19 20 21 22 23 ]
syscall-4 OVERFLOW!   active[19 20 21 22 23 ]
syscall-11 10   active[19 20 21 22 23 ]
GOTO _label7   active[19 20 21 22 23 ]
_label8: k[n] =i   active[19 20 21 22 23 ]
_label7: i = i + 1   active[19 20 21 22 23 ]
GOTO _label5   active[19 20 21 22 23 ]
_label6: #TMP35 = s == 0   active[-35 19 21 22 ]
BZ #TMP35 _label10   active[19 21 22 ]
syscall-4 complete number:    active[19 21 22 ]
syscall-1 j   active[19 21 22 ]
syscall-11 10   active[19 21 22 ]
i=0   active[19 20 21 22 ]
_label11: #TMP36 = i <= n   active[-36 19 20 21 22 ]
BZ #TMP36 _label12   active[19 20 21 22 ]
syscall-4      active[19 20 21 22 ]
#TMP37 = k [ i ]    active[-37 19 20 21 22 ]
syscall-1 #TMP37   active[19 20 21 22 ]
syscall-11 10   active[19 20 21 22 ]
i = i + 1   active[19 20 21 22 ]
GOTO _label11   active[19 20 21 22 ]
_label12: syscall-4     active[19 21 ]
syscall-11 10   active[19 21 ]
_label10: j = j + 1   active[19 21 ]
GOTO _label3   active[19 21 ]
_label4: syscall-4 ---------------------------------------------------------------   active[19 ]
syscall-11 10   active[19 ]
syscall-4 'water flower'number is:   active[19 ]
syscall-11 10   active[19 ]
i=100   active[19 20 ]
y=0   active[19 20 25 ]
_label13: #TMP38 = 100 + 128   active[-38 19 20 25 ]
#TMP39 = i < #TMP38   active[-39 19 20 25 ]
BZ #TMP39 _label14   active[19 20 25 ]
n = i / 100   active[19 20 22 25 ]
#TMP41 = i / 10   active[-41 19 20 22 25 ]
#TMP46 = #TMP41 / 10   active[-46 -41 19 20 22 25 ]
#TMP47 = #TMP46 * 10   active[-47 -41 19 20 22 25 ]
#TMP44 = #TMP41 - #TMP47   active[-44 19 20 22 25 ]
#TMP52 = i / 10   active[-52 -44 19 20 22 25 ]
#TMP53 = #TMP52 * 10   active[-53 -44 19 20 22 25 ]
#TMP50 = i - #TMP53   active[-50 -44 19 20 22 25 ]
#TMP59 = n * 100   active[-59 -50 -44 19 20 22 25 ]
#TMP60 = #TMP44 * 10   active[-60 -59 -50 -44 19 20 22 25 ]
#TMP61 = #TMP59 + #TMP60   active[-61 -50 -44 19 20 22 25 ]
#TMP62 = #TMP61 + #TMP50   active[-62 -50 -44 19 20 22 25 ]
#TMP68 = n * n   active[-68 -62 -50 -44 19 20 22 25 ]
#TMP69 = #TMP68 * n   active[-69 -62 -50 -44 19 20 25 ]
#TMP70 = #TMP44 * #TMP44   active[-70 -69 -62 -50 -44 19 20 25 ]
#TMP71 = #TMP70 * #TMP44   active[-71 -69 -62 -50 19 20 25 ]
#TMP72 = #TMP69 + #TMP71   active[-72 -62 -50 19 20 25 ]
#TMP73 = #TMP50 * #TMP50   active[-73 -72 -62 -50 19 20 25 ]
#TMP74 = #TMP73 * #TMP50   active[-74 -72 -62 19 20 25 ]
#TMP75 = #TMP72 + #TMP74   active[-75 -62 19 20 25 ]
#TMP76 = #TMP62 == #TMP75   active[-76 19 20 25 ]
BZ #TMP76 _label15   active[19 20 25 ]
k[y] =i   active[19 20 25 ]
y = y + 1   active[19 20 25 ]
_label15: i = i + 1   active[19 20 25 ]
GOTO _label13   active[19 20 25 ]
_label14: i=0   active[19 20 25 ]
_label16: #TMP78 = i < y   active[-78 19 20 25 ]
BZ #TMP78 _label17   active[19 20 25 ]
syscall-4      active[19 20 25 ]
#TMP79 = k [ i ]    active[-79 19 20 25 ]
syscall-1 #TMP79   active[19 20 25 ]
syscall-11 10   active[19 20 25 ]
i = i + 1   active[19 20 25 ]
GOTO _label16   active[19 20 25 ]
_label17: syscall-4     active[]
syscall-11 10   active[]
syscall-4 ---------------------------------------------------------------   active[]
syscall-11 10   active[]
m=2   active[26 ]
h=0   active[26 28 ]
leap=1   active[26 28 29 ]
_label18: #TMP80 = m <= 128   active[-80 26 28 29 ]
BZ #TMP80 _label19   active[26 28 29 ]
k2 = m / 2   active[26 27 28 29 ]
i=2   active[20 26 27 28 29 ]
_label20: #TMP82 = i <= k2   active[-82 20 26 27 28 29 ]
BZ #TMP82 _label21   active[20 26 27 28 29 ]
#TMP83 = m / i   active[20 26 27 28 29 ]
#TMP89 = m / i   active[-89 20 26 27 28 29 ]
#TMP90 = #TMP89 * i   active[-90 20 26 27 28 29 ]
#TMP87 = m - #TMP90   active[-87 20 26 27 28 29 ]
#TMP91 = #TMP87 == 0   active[-91 20 26 27 28 29 ]
BZ #TMP91 _label22   active[20 26 27 28 29 ]
leap=0   active[20 26 27 28 29 ]
_label22: i = i + 1   active[20 26 27 28 29 ]
GOTO _label20   active[20 26 27 28 29 ]
_label21: #TMP92 = leap == 1   active[-92 26 28 ]
BZ #TMP92 _label23   active[26 28 ]
syscall-4     active[26 28 ]
syscall-1 m   active[26 28 ]
syscall-11 10   active[26 28 ]
h = h + 1   active[26 28 ]
#TMP94 = h / 10   active[-94 26 28 ]
x2 = #TMP94 * 10   active[26 28 30 ]
#TMP96 = x2 == h   active[-96 26 28 ]
BZ #TMP96 _label23   active[26 28 ]
syscall-4     active[26 28 ]
syscall-11 10   active[26 28 ]
_label23: m = m + 1   active[26 28 ]
leap=1   active[26 28 29 ]
GOTO _label18   active[26 28 29 ]
_label19: syscall-4 The total is    active[28 ]
syscall-1 h   active[]
syscall-11 10   active[]
ret    active[]
int n
void main()   active[]
push 5   active[]
call factorial   active[]
n=RET   active[35 ]
syscall-4 5 !=    active[35 ]
syscall-1 n   active[]
syscall-11 10   active[]
push 5   active[]
push 10   active[]
call swap   active[]
call complete_flower_num   active[]


global:
name:MAX_NUM	id:0	type:const int	scope:	addr:0	dimension:0link:NULL
name:complete_flower_num	id:18	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:factorial	id:1	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:1	paras:[2 ]
name:flower_num	id:14	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[15 16 17 ]
name:full_num	id:10	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:3	paras:[11 12 13 ]
name:main	id:34	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:0	paras:[]
name:mod	id:3	type:function	scope:	addr:-1	dimension:0
link:		returnType:int	paraNum:2	paras:[4 5 ]
name:swap	id:6	type:function	scope:	addr:-1	dimension:0
link:		returnType:void	paraNum:2	paras:[7 8 ]
complete_flower_num:
name:a	id:31	type:int	scope:complete_flower_num	addr:692	dimension:0link:NULL
name:b	id:32	type:int	scope:complete_flower_num	addr:696	dimension:0link:NULL
name:c	id:33	type:int	scope:complete_flower_num	addr:700	dimension:0link:NULL
name:h	id:28	type:int	scope:complete_flower_num	addr:704	dimension:0link:NULL
name:i	id:20	type:int	scope:complete_flower_num	addr:708	dimension:0link:NULL
name:j	id:21	type:int	scope:complete_flower_num	addr:712	dimension:0link:NULL
name:k	id:19	type:int[]	scope:complete_flower_num	addr:180	dimension:128link:NULL
name:k2	id:27	type:int	scope:complete_flower_num	addr:716	dimension:0link:NULL
name:leap	id:29	type:int	scope:complete_flower_num	addr:720	dimension:0link:NULL
name:m	id:26	type:int	scope:complete_flower_num	addr:724	dimension:0link:NULL
name:n	id:22	type:int	scope:complete_flower_num	addr:728	dimension:0link:NULL
name:s	id:23	type:int	scope:complete_flower_num	addr:732	dimension:0link:NULL
name:x1	id:24	type:int	scope:complete_flower_num	addr:736	dimension:0link:NULL
name:x2	id:30	type:int	scope:complete_flower_num	addr:740	dimension:0link:NULL
name:y	id:25	type:int	scope:complete_flower_num	addr:744	dimension:0link:NULL
tmp96 addr:0
tmp94 addr:4
tmp92 addr:8
tmp91 addr:12
tmp90 addr:16
tmp89 addr:20
tmp87 addr:24
tmp83 addr:28
tmp82 addr:32
tmp80 addr:36
tmp79 addr:40
tmp78 addr:44
tmp76 addr:48
tmp75 addr:52
tmp74 addr:56
tmp73 addr:60
tmp72 addr:64
tmp71 addr:68
tmp70 addr:72
tmp69 addr:76
tmp68 addr:80
tmp62 addr:84
tmp61 addr:88
tmp60 addr:92
tmp59 addr:96
tmp53 addr:100
tmp52 addr:104
tmp50 addr:108
tmp47 addr:112
tmp46 addr:116
tmp44 addr:120
tmp41 addr:124
tmp39 addr:128
tmp38 addr:132
tmp37 addr:136
tmp36 addr:140
tmp35 addr:144
tmp34 addr:148
tmp31 addr:152
tmp30 addr:156
tmp29 addr:160
tmp27 addr:164
tmp23 addr:168
tmp22 addr:172
tmp21 addr:176
factorial:
name:n	id:2	type:int	scope:factorial	addr:52	dimension:0link:NULL
tmp5 addr:0
tmp4 addr:4
tmp3 addr:8
tmp2 addr:12
flower_num:
name:a	id:17	type:int	scope:flower_num	addr:76	dimension:0link:NULL
name:j	id:16	type:int	scope:flower_num	addr:72	dimension:0link:NULL
name:n	id:15	type:int	scope:flower_num	addr:68	dimension:0link:NULL
tmp20 addr:0
tmp19 addr:4
tmp18 addr:8
tmp17 addr:12
tmp16 addr:16
tmp15 addr:20
tmp14 addr:24
tmp13 addr:28
full_num:
name:a	id:13	type:int	scope:full_num	addr:60	dimension:0link:NULL
name:j	id:12	type:int	scope:full_num	addr:56	dimension:0link:NULL
name:n	id:11	type:int	scope:full_num	addr:52	dimension:0link:NULL
tmp12 addr:0
tmp11 addr:4
tmp10 addr:8
tmp9 addr:12
main:
name:n	id:35	type:int	scope:main	addr:0	dimension:0link:NULL
mod:
name:x	id:4	type:int	scope:mod	addr:44	dimension:0link:NULL
name:y	id:5	type:int	scope:mod	addr:48	dimension:0link:NULL
tmp7 addr:0
tmp6 addr:4
swap:
name:temp	id:9	type:int	scope:swap	addr:0	dimension:0link:NULL
name:x	id:7	type:int	scope:swap	addr:40	dimension:0link:NULL
name:y	id:8	type:int	scope:swap	addr:44	dimension:0link:NULL


